-- Enhanced 2take1 Hub Script - Fully Optimized Version 2025 with UI Scale Control
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local Services = {
    TextChat = game:GetService("TextChatService"),
    UIS = game:GetService("UserInputService"),
    Tween = game:GetService("TweenService"),
    Run = game:GetService("RunService"),
    Teleport = game:GetService("TeleportService"),
    Http = game:GetService("HttpService"),
    StarterGui = game:GetService("StarterGui"),
    Stats = game:GetService("Stats")
}
if not game:IsLoaded() then game.Loaded:Wait() end

-- Enhanced UI Scaling System with User Control
local UIScale = {
    userScale = 0.85, -- Default smaller scale (was 1.0)
    minScale = 0.5,
    maxScale = 1.5
}

local function getScaleFactor()
    local viewport = workspace.CurrentCamera.ViewportSize
    local minDimension = math.min(viewport.X, viewport.Y)
    local isMobile = Services.UIS.TouchEnabled and not Services.UIS.KeyboardEnabled
    
    -- Improved scaling algorithm with user control
    local baseSize = isMobile and 600 or 900
    local autoScale = math.clamp(minDimension / baseSize, isMobile and 0.7 or 0.6, isMobile and 1.2 or 1.1)
    local finalScale = autoScale * UIScale.userScale
    
    return finalScale, isMobile
end
local scaleFactor, isMobile = getScaleFactor()

-- Helper function to apply scaling
local function S(offset)
    return math.floor(offset * scaleFactor + 0.5)
end

-- Function to update all UI scaling
local function updateUIScale()
    scaleFactor, isMobile = getScaleFactor()
    -- This will be called when user changes scale
end

-- Configuration
local Config = {
    speed = 3, range = S(15), walkSpeed = 16, jumpPower = 50, flySpeed = S(50),
    commandPrefix = ";", antiLagEnabled = true, performanceMode = false,
    whitelistedIds = {1234567, 7654321}
}

-- State Management
local State = {
    fastFarm = false, slowFarm = false, godMode = false, killAura = false,
    flying = false, noclip = false, commandBarVisible = false, loopKill = false,
    loopKillTargets = {}, killAllActive = false, infiniteJump = false,
    watchingPlayer = nil, autoFarm = false, reverseDmg = false, speedHack = false
}

-- Statistics
local Stats = {
    power = 0, kills = 0, health = 100, powerGainedThisSession = 0,
    sessionStartTime = tick(), lastPowerCheck = 0, powerPerSecond = 0,
    powerPerHour = 0, lastUpdateTime = tick(), ping = 0, fps = 0, basePower = 0
}

-- Data Storage
local Data = {
    adminPlayers = {}, connections = {}, flyObjects = {}, killAllTargets = {},
    noclipConnection = nil, flyConnection = nil, charDiedFlyConnection = nil, chatConnection = nil,
    watchConnection = nil, reverseDmgConnection = nil, attackerTracking = {}, speedConnections = {},
    uiElements = {} -- Store UI elements for scaling updates
}

-- Theme (Enhanced with better contrast and modern colors)
local Theme = {
    background = Color3.fromRGB(15, 15, 20),
    secondary = Color3.fromRGB(25, 25, 35),
    tertiary = Color3.fromRGB(35, 35, 45),
    accent = Color3.fromRGB(70, 130, 255),
    accentHover = Color3.fromRGB(90, 150, 255),
    text = Color3.fromRGB(255, 255, 255),
    textSecondary = Color3.fromRGB(190, 190, 200),
    success = Color3.fromRGB(87, 242, 135),
    danger = Color3.fromRGB(237, 66, 69),
    warning = Color3.fromRGB(255, 193, 7),
    border = Color3.fromRGB(70, 70, 80),
    commandBarBg = Color3.fromRGB(20, 20, 30), -- New color for command bar
    glassBorder = Color3.fromRGB(100, 100, 120) -- Glass effect border
}

-- Utility Functions
local function protectGui(gui)
    if syn and syn.protect_gui then syn.protect_gui(gui)
    elseif gethui then gui.Parent = gethui() return end
    pcall(function() gui.Parent = game:GetService("CoreGui") end)
end

local function notification(text, duration, type)
    duration = duration or 3
    pcall(function()
        Services.StarterGui:SetCore("SendNotification", {
            Title = "2take1 Hub", Text = text, Duration = duration,
            Icon = "rbxassetid://7733964640"
        })
    end)
end

local function formatNumber(n)
    if n >= 1e12 then return string.format("%.2fT", n/1e12)
    elseif n >= 1e9 then return string.format("%.2fB", n/1e9)
    elseif n >= 1e6 then return string.format("%.2fM", n/1e6)
    elseif n >= 1e3 then return string.format("%.2fK", n/1e3)
    else return tostring(math.floor(n)) end
end

local function formatTime(s)
    return string.format("%02d:%02d:%02d", math.floor(s/3600), math.floor((s%3600)/60), math.floor(s%60))
end

-- Enhanced Draggable Function with Mobile Support
local function makeDraggable(frame, handle)
    handle = handle or frame
    local dragging = false
    local dragStart = nil
    local startPos = nil
    local inputType = nil

    local function beginDrag(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            inputType = input.UserInputType
            if input.UserInputType == Enum.UserInputType.Touch then
                dragStart = input.Position
            else
                dragStart = Services.UIS:GetMouseLocation()
            end
            startPos = frame.Position
        end
    end

    local function endDrag(input)
        if input.UserInputType == inputType then
            dragging = false
            inputType = nil
        end
    end

    local function updateDrag(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement or (dragging and input.UserInputType == Enum.UserInputType.Touch) then
            local currentPos = input.UserInputType == Enum.UserInputType.Touch and input.Position or Services.UIS:GetMouseLocation()
            local delta = currentPos - dragStart
            frame.Position = UDim2.new(
                startPos.X.Scale, startPos.X.Offset + delta.X,
                startPos.Y.Scale, startPos.Y.Offset + delta.Y
            )
        end
    end

    handle.InputBegan:Connect(beginDrag)
    handle.InputEnded:Connect(endDrag)
    Services.UIS.InputChanged:Connect(updateDrag)
end

local function addCornerAndStroke(obj, radius, color)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius or S(12))
    corner.Parent = obj
    if color then
        local stroke = Instance.new("UIStroke")
        stroke.Thickness = S(1)
        stroke.Color = color
        stroke.Parent = obj
    end
end

-- UI Rescaling Function
local function rescaleUI()
    updateUIScale()
    
    -- Update all stored UI elements
    for _, element in pairs(Data.uiElements) do
        if element.obj and element.obj.Parent then
            if element.size then
                element.obj.Size = UDim2.new(element.size.X.Scale, S(element.size.X.Offset), 
                                           element.size.Y.Scale, S(element.size.Y.Offset))
            end
            if element.position then
                element.obj.Position = UDim2.new(element.position.X.Scale, S(element.position.X.Offset),
                                               element.position.Y.Scale, S(element.position.Y.Offset))
            end
            if element.textSize then
                element.obj.TextSize = S(element.textSize)
            end
            -- Update corner radius
            local corner = element.obj:FindFirstChildOfClass("UICorner")
            if corner and element.cornerRadius then
                corner.CornerRadius = UDim.new(0, S(element.cornerRadius))
            end
            -- Update stroke thickness
            local stroke = element.obj:FindFirstChildOfClass("UIStroke")
            if stroke then
                stroke.Thickness = S(1)
            end
        end
    end
    
    -- Update range for combat
    Config.range = S(15)
    Config.flySpeed = S(50)
end

-- Enhanced UI element creation with scaling tracking
local function createScalableElement(obj, sizeOffsets, positionOffsets, textSize, cornerRadius)
    local elementData = {
        obj = obj,
        size = sizeOffsets and UDim2.new(sizeOffsets.X.Scale, sizeOffsets.X.Offset, sizeOffsets.Y.Scale, sizeOffsets.Y.Offset),
        position = positionOffsets and UDim2.new(positionOffsets.X.Scale, positionOffsets.X.Offset, positionOffsets.Y.Scale, positionOffsets.Y.Offset),
        textSize = textSize,
        cornerRadius = cornerRadius
    }
    table.insert(Data.uiElements, elementData)
    return elementData
end

-- Create Main GUI with better sizing
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "2take1Hub"
screenGui.ResetOnSpawn = false
protectGui(screenGui)

-- Enhanced Command Bar with Modern Glass Effect Design
local commandBar = Instance.new("Frame")
commandBar.Size = UDim2.new(0, S(isMobile and 380 or 650), 0, S(isMobile and 60 or 70))
commandBar.Position = UDim2.new(0.5, -S(isMobile and 190 or 325), 1, S(100))
commandBar.BackgroundColor3 = Theme.commandBarBg
commandBar.BorderSizePixel = 0
commandBar.BackgroundTransparency = 0.05 -- Slight transparency for glass effect
commandBar.Parent = screenGui
addCornerAndStroke(commandBar, S(15), Theme.glassBorder)
makeDraggable(commandBar)
createScalableElement(commandBar, 
    UDim2.new(0, isMobile and 380 or 650, 0, isMobile and 60 or 70),
    UDim2.new(0.5, -(isMobile and 190 or 325), 1, 100), nil, 15)

-- Add glass effect gradient
local gradient = Instance.new("UIGradient")
gradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(40, 40, 55)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(20, 20, 35))
}
gradient.Rotation = 45
gradient.Parent = commandBar

-- Command prefix indicator
local prefixLabel = Instance.new("TextLabel")
prefixLabel.Size = UDim2.new(0, S(30), 1, 0)
prefixLabel.Position = UDim2.new(0, S(15), 0, 0)
prefixLabel.BackgroundTransparency = 1
prefixLabel.Text = ";"
prefixLabel.TextColor3 = Theme.accent
prefixLabel.TextSize = S(isMobile and 18 or 22)
prefixLabel.Font = Enum.Font.SourceSansBold
prefixLabel.TextXAlignment = Enum.TextXAlignment.Center
prefixLabel.Parent = commandBar
createScalableElement(prefixLabel,
    UDim2.new(0, 30, 1, 0),
    UDim2.new(0, 15, 0, 0),
    isMobile and 18 or 22)

local cmdInput = Instance.new("TextBox")
cmdInput.Size = UDim2.new(1, -S(isMobile and 140 or 220), 1, -S(isMobile and 20 or 25))
cmdInput.Position = UDim2.new(0, S(isMobile and 50 or 70), 0, S(isMobile and 10 or 12.5))
cmdInput.BackgroundColor3 = Theme.secondary
cmdInput.BackgroundTransparency = 0.3
cmdInput.Text = ""
cmdInput.PlaceholderText = "Enter command (without ;)..."
cmdInput.PlaceholderColor3 = Theme.textSecondary
cmdInput.TextColor3 = Theme.text
cmdInput.TextSize = S(isMobile and 14 or 16)
cmdInput.Font = Enum.Font.SourceSans
cmdInput.Parent = commandBar
addCornerAndStroke(cmdInput, S(10), Theme.border)
createScalableElement(cmdInput,
    UDim2.new(1, -(isMobile and 140 or 220), 1, -(isMobile and 20 or 25)),
    UDim2.new(0, isMobile and 50 or 70, 0, isMobile and 10 or 12.5),
    isMobile and 14 or 16, 10)

local execBtn = Instance.new("TextButton")
execBtn.Size = UDim2.new(0, S(isMobile and 65 or 90), 0, S(isMobile and 35 or 45))
execBtn.Position = UDim2.new(1, -S(isMobile and 75 or 105), 0, S(isMobile and 12.5 or 12.5))
execBtn.BackgroundColor3 = Theme.accent
execBtn.Text = "Execute"
execBtn.TextColor3 = Theme.text
execBtn.TextSize = S(isMobile and 12 or 16)
execBtn.Font = Enum.Font.SourceSansBold
execBtn.Parent = commandBar
addCornerAndStroke(execBtn, S(10))
createScalableElement(execBtn,
    UDim2.new(0, isMobile and 65 or 90, 0, isMobile and 35 or 45),
    UDim2.new(1, -(isMobile and 75 or 105), 0, isMobile and 12.5 or 12.5),
    isMobile and 12 or 16, 10)

-- Hover effect for execute button
execBtn.MouseEnter:Connect(function()
    Services.Tween:Create(execBtn, TweenInfo.new(0.2), {BackgroundColor3 = Theme.accentHover}):Play()
end)
execBtn.MouseLeave:Connect(function()
    Services.Tween:Create(execBtn, TweenInfo.new(0.2), {BackgroundColor3 = Theme.accent}):Play()
end)

-- Main Frame (Better proportioned and smaller default)
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, S(isMobile and 350 or 450), 0, S(isMobile and 550 or 700))
mainFrame.Position = UDim2.new(0.5, -S(isMobile and 175 or 225), 0.5, -S(isMobile and 275 or 350))
mainFrame.BackgroundColor3 = Theme.background
mainFrame.BorderSizePixel = 0
mainFrame.Parent = screenGui
addCornerAndStroke(mainFrame, S(12), Theme.border)
createScalableElement(mainFrame,
    UDim2.new(0, isMobile and 350 or 450, 0, isMobile and 550 or 700),
    UDim2.new(0.5, -(isMobile and 175 or 225), 0.5, -(isMobile and 275 or 350)), nil, 12)

local header = Instance.new("Frame")
header.Size = UDim2.new(1, 0, 0, S(isMobile and 45 or 60))
header.BackgroundColor3 = Theme.secondary
header.Parent = mainFrame
makeDraggable(mainFrame, header)
addCornerAndStroke(header, S(12))
createScalableElement(header,
    UDim2.new(1, 0, 0, isMobile and 45 or 60), nil, nil, 12)

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, -S(100), 1, 0)
title.Position = UDim2.new(0, S(15), 0, 0)
title.BackgroundTransparency = 1
title.Text = "2take1 Hub 2025"
title.TextColor3 = Theme.text
title.TextSize = S(isMobile and 16 or 20)
title.Font = Enum.Font.SourceSansBold
title.TextXAlignment = Enum.TextXAlignment.Left
title.Parent = header
createScalableElement(title,
    UDim2.new(1, -100, 1, 0), UDim2.new(0, 15, 0, 0),
    isMobile and 16 or 20)

-- UI Scale Control in Header
local scaleLabel = Instance.new("TextLabel")
scaleLabel.Size = UDim2.new(0, S(40), 1, 0)
scaleLabel.Position = UDim2.new(1, -S(140), 0, 0)
scaleLabel.BackgroundTransparency = 1
scaleLabel.Text = "Scale:"
scaleLabel.TextColor3 = Theme.textSecondary
scaleLabel.TextSize = S(isMobile and 10 or 12)
scaleLabel.Font = Enum.Font.SourceSans
scaleLabel.TextXAlignment = Enum.TextXAlignment.Left
scaleLabel.Parent = header
createScalableElement(scaleLabel,
    UDim2.new(0, 40, 1, 0), UDim2.new(1, -140, 0, 0),
    isMobile and 10 or 12)

local scaleInput = Instance.new("TextBox")
scaleInput.Size = UDim2.new(0, S(45), 0, S(isMobile and 25 or 30))
scaleInput.Position = UDim2.new(1, -S(90), 0.5, -S(isMobile and 12.5 or 15))
scaleInput.BackgroundColor3 = Theme.tertiary
scaleInput.Text = tostring(math.floor(UIScale.userScale * 100 + 0.5)) .. "%"
scaleInput.PlaceholderText = "85%"
scaleInput.TextColor3 = Theme.text
scaleInput.TextSize = S(isMobile and 9 or 11)
scaleInput.Font = Enum.Font.SourceSans
scaleInput.Parent = header
addCornerAndStroke(scaleInput, S(4), Theme.border)
createScalableElement(scaleInput,
    UDim2.new(0, 45, 0, isMobile and 25 or 30),
    UDim2.new(1, -90, 0.5, -(isMobile and 12.5 or 15)),
    isMobile and 9 or 11, 4)

-- Scale input functionality
scaleInput.FocusLost:Connect(function(enterPressed)
    local text = scaleInput.Text:gsub("%%", "")
    local newScale = tonumber(text)
    if newScale then
        newScale = newScale / 100
        newScale = math.clamp(newScale, UIScale.minScale, UIScale.maxScale)
        UIScale.userScale = newScale
        scaleInput.Text = tostring(math.floor(newScale * 100 + 0.5)) .. "%"
        rescaleUI()
        notification("UI Scale set to " .. math.floor(newScale * 100 + 0.5) .. "%", 2, "success")
    else
        scaleInput.Text = tostring(math.floor(UIScale.userScale * 100 + 0.5)) .. "%"
        notification("Invalid scale value! Use 50-150", 2, "warning")
    end
end)

local closeBtn = Instance.new("TextButton")
closeBtn.Size = UDim2.new(0, S(isMobile and 30 or 40), 0, S(isMobile and 25 or 35))
closeBtn.Position = UDim2.new(1, -S(isMobile and 35 or 45), 0, S(isMobile and 10 or 12.5))
closeBtn.BackgroundColor3 = Theme.danger
closeBtn.Text = "X"
closeBtn.TextColor3 = Theme.text
closeBtn.TextSize = S(isMobile and 12 or 16)
closeBtn.Font = Enum.Font.SourceSansBold
closeBtn.Parent = header
addCornerAndStroke(closeBtn, S(6))
createScalableElement(closeBtn,
    UDim2.new(0, isMobile and 30 or 40, 0, isMobile and 25 or 35),
    UDim2.new(1, -(isMobile and 35 or 45), 0, isMobile and 10 or 12.5),
    isMobile and 12 or 16, 6)

local content = Instance.new("ScrollingFrame")
content.Size = UDim2.new(1, -S(20), 1, -S(isMobile and 65 or 80))
content.Position = UDim2.new(0, S(10), 0, S(isMobile and 55 or 70))
content.BackgroundColor3 = Theme.secondary
content.BorderSizePixel = 0
content.ScrollBarThickness = S(isMobile and 8 or 6)
content.ScrollBarImageColor3 = Theme.accent
content.AutomaticCanvasSize = Enum.AutomaticSize.Y
content.Parent = mainFrame
addCornerAndStroke(content, S(8))
createScalableElement(content,
    UDim2.new(1, -20, 1, -(isMobile and 65 or 80)),
    UDim2.new(0, 10, 0, isMobile and 55 or 70), nil, 8)

local layout = Instance.new("UIListLayout")
layout.Padding = UDim.new(0, S(10))
layout.Parent = content

-- Enhanced Stats Frame with Watch Display
local statsFrame = Instance.new("Frame")
statsFrame.Size = UDim2.new(1, -S(10), 0, S(isMobile and 260 or 300))
statsFrame.BackgroundColor3 = Theme.tertiary
statsFrame.Parent = content
addCornerAndStroke(statsFrame, S(8), Theme.border)
createScalableElement(statsFrame,
    UDim2.new(1, -10, 0, isMobile and 260 or 300), nil, nil, 8)

local statLabels = {}
local statData = {
    {n="title", t="Player Statistics", p=UDim2.new(0,S(10),0,S(5)), s=UDim2.new(1,-S(20),0,S(isMobile and 20 or 25)), c=Theme.accent, sz=S(isMobile and 14 or 18)},
    {n="power", t="Power: 0", p=UDim2.new(0,S(15),0,S(isMobile and 28 or 35))},
    {n="kills", t="Kills: 0", p=UDim2.new(0.5,S(5),0,S(isMobile and 28 or 35))},
    {n="health", t="Health: 100", p=UDim2.new(0,S(15),0,S(isMobile and 48 or 60))},
    {n="tools", t="Tools: 0", p=UDim2.new(0.5,S(5),0,S(isMobile and 48 or 60))},
    {n="pps", t="Power/sec: 0", p=UDim2.new(0,S(15),0,S(isMobile and 68 or 85))},
    {n="pph", t="Power/hr: 0", p=UDim2.new(0.5,S(5),0,S(isMobile and 68 or 85))},
    {n="session", t="Session: 0", p=UDim2.new(0,S(15),0,S(isMobile and 88 or 110))},
    {n="ping", t="Ping: 0ms", p=UDim2.new(0.5,S(5),0,S(isMobile and 88 or 110))},
    {n="fps", t="FPS: 0", p=UDim2.new(0,S(15),0,S(isMobile and 108 or 135))},
    {n="time", t="Time: 00:00:00", p=UDim2.new(0.5,S(5),0,S(isMobile and 108 or 135))},
    {n="eff", t="Efficiency: N/A", p=UDim2.new(0,S(15),0,S(isMobile and 128 or 155)), s=UDim2.new(1,-S(30),0,S(18))},
    {n="watchTitle", t="Watch Status:", p=UDim2.new(0,S(15),0,S(isMobile and 148 or 175)), s=UDim2.new(1,-S(30),0,S(16)), c=Theme.textSecondary, sz=S(isMobile and 11 or 13)},
    {n="watchPlayer", t="Not watching anyone", p=UDim2.new(0,S(15),0,S(isMobile and 164 or 195)), s=UDim2.new(1,-S(30),0,S(16)), c=Theme.warning, sz=S(isMobile and 10 or 12)},
    {n="watchStats", t="", p=UDim2.new(0,S(15),0,S(isMobile and 180 or 215)), s=UDim2.new(1,-S(30),0,S(16)), c=Theme.success, sz=S(isMobile and 9 or 11)},
    {n="watchPos", t="", p=UDim2.new(0,S(15),0,S(isMobile and 196 or 235)), s=UDim2.new(1,-S(30),0,S(16)), c=Theme.textSecondary, sz=S(isMobile and 9 or 11)}
}

for _, d in ipairs(statData) do
    local l = Instance.new("TextLabel")
    l.Size = d.s or UDim2.new(0.48,-S(15),0,S(18))
    l.Position = d.p
    l.BackgroundTransparency = 1
    l.Text = d.t
    l.TextColor3 = d.c or Theme.text
    l.TextSize = d.sz or S(isMobile and 10 or 12)
    l.Font = d.n == "title" and Enum.Font.SourceSansBold or Enum.Font.SourceSans
    l.TextXAlignment = Enum.TextXAlignment.Left
    l.Parent = statsFrame
    statLabels[d.n] = l
    
    -- Track these labels for scaling
    createScalableElement(l, d.s, d.p, d.sz or (isMobile and 10 or 12))
end

-- Tool Functions (Optimized)
local function getTools()
    local tools = {}
    local toolCount = 0
    for _, c in pairs({player.Character, player:FindFirstChild("Backpack")}) do
        if c then
            for _, t in pairs(c:GetChildren()) do
                if t:IsA("Tool") and t:FindFirstChild("Handle") then
                    table.insert(tools, t.Handle)
                    toolCount = toolCount + 1
                end
            end
        end
    end
    -- Update tool count in stats
    if statLabels.tools then
        statLabels.tools.Text = "Tools: " .. toolCount
    end
    
    if #tools == 0 then
        local l = workspace:FindFirstChild("load")
        if l and l:FindFirstChild("RemoteEvent") then
            pcall(function() l.RemoteEvent:FireServer() end)
            wait(0.5)
            return getTools()
        end
    end
    return tools
end

-- Player Finding (Enhanced)
local function findPlayer(n)
    if not n or n == "" then return nil end
    n = n:lower()
    if n == "me" then return player end
    if n == "all" then return Players:GetPlayers() end
    if n == "others" then
        local o = {}
        for _, p in pairs(Players:GetPlayers()) do
            if p ~= player then table.insert(o, p) end
        end
        return o
    end
    -- Enhanced search - exact match first, then partial
    for _, p in pairs(Players:GetPlayers()) do
        if p.Name:lower() == n or p.DisplayName:lower() == n then
            return p
        end
    end
    for _, p in pairs(Players:GetPlayers()) do
        if p.Name:lower():find(n, 1, true) or p.DisplayName:lower():find(n, 1, true) then
            return p
        end
    end
    return nil
end

-- Combat Functions (Optimized)
local function killPlayer(t)
    if not t or not t.Character or t == player then return false end
    local h = t.Character:FindFirstChildOfClass("Humanoid")
    if not h or h.Health <= 0 then return false end
    local tools = getTools()
    if #tools == 0 then return false end
    local tool = #tools > 1 and tools[2] or tools[1]
    if tool and tool.Parent then
        local r = tool:FindFirstChild("dmg") and tool.dmg:FindFirstChild("RemoteEvent")
        if r then
            pcall(function()
                for i = 1, 20 do
                    r:FireServer(h, math.huge)
                    if h.Health <= 0 then break end
                    wait(0.01)
                end
            end)
            return true
        end
    end
    return false
end

local function godPlayer(t)
    local tools = getTools()
    if #tools == 0 then return false end
    local targets = type(t) == "table" and t or {t}
    local tool = tools[1]
    if tool and tool.Parent then
        local r = tool:FindFirstChild("dmg") and tool.dmg:FindFirstChild("RemoteEvent")
        if r then
            for _, p in pairs(targets) do
                if p and p.Character then
                    local h = p.Character:FindFirstChildOfClass("Humanoid")
                    if h then
                        pcall(function()
                            for i = 1, 25 do
                                r:FireServer(h, -math.huge)
                                wait(0.02)
                            end
                        end)
                    end
                end
            end
            return true
        end
    end
    return false
end

local function farm(speed)
    if not player.Character then return end
    local tools = getTools()
    for _, h in pairs(tools) do
        if h and h.Parent then
            local r = h:FindFirstChild("up") and h.up:FindFirstChild("RemoteEvent")
            if r then
                pcall(function()
                    for i = 1, speed do
                        r:FireServer()
                        if speed > 3 then wait(0.005) end
                    end
                end)
            end
        end
    end
end

-- Fixed Player Watch Function with Better UI Layout
local function watchPlayer(targetName)
    local target = findPlayer(targetName)
    if not target or type(target) == "table" then
        notification("Player not found: " .. tostring(targetName), 2, "error")
        return
    end
    
    if Data.watchConnection then
        Data.watchConnection:Disconnect()
        Data.watchConnection = nil
        State.watchingPlayer = nil
    end
    
    State.watchingPlayer = target
    notification("Now watching: " .. target.DisplayName, 3, "success")
    
    Data.watchConnection = Services.Run.Heartbeat:Connect(function()
        if not State.watchingPlayer or not State.watchingPlayer.Character then
            if Data.watchConnection then
                Data.watchConnection:Disconnect()
                Data.watchConnection = nil
                State.watchingPlayer = nil
                if statLabels.watchPlayer then
                    statLabels.watchPlayer.Text = "Not watching anyone"
                    statLabels.watchPlayer.TextColor3 = Theme.warning
                    statLabels.watchStats.Text = ""
                    statLabels.watchPos.Text = ""
                end
            end
            return
        end
        
        local char = State.watchingPlayer.Character
        local humanoid = char:FindFirstChildOfClass("Humanoid")
        local rootPart = char:FindFirstChild("HumanoidRootPart")
        
        if humanoid and rootPart and statLabels.watchPlayer then
            local health = math.floor(humanoid.Health)
            local maxHealth = math.floor(humanoid.MaxHealth)
            local position = rootPart.Position
            
            -- Get player's power and kills from leaderstats
            local targetPower = 0
            local targetKills = 0
            local ls = State.watchingPlayer:FindFirstChild("leaderstats")
            if ls then
                for _, n in ipairs({"Power", "Strength", "Energy", "Points", "Coins"}) do
                    local s = ls:FindFirstChild(n) or ls:FindFirstChild(n:lower())
                    if s then targetPower = tonumber(s.Value) or 0 break end
                end
                for _, n in ipairs({"Kills", "KOs", "Eliminations"}) do
                    local s = ls:FindFirstChild(n) or ls:FindFirstChild(n:lower())
                    if s then targetKills = tonumber(s.Value) or 0 break end
                end
            end
            
            -- Count tools in inventory
            local toolCount = 0
            for _, c in pairs({char, State.watchingPlayer:FindFirstChild("Backpack")}) do
                if c then
                    for _, t in pairs(c:GetChildren()) do
                        if t:IsA("Tool") then
                            toolCount = toolCount + 1
                        end
                    end
                end
            end
            
            -- Update watch labels with clean formatting
            statLabels.watchPlayer.Text = "Watching: " .. State.watchingPlayer.DisplayName
            statLabels.watchPlayer.TextColor3 = Theme.success
            
            statLabels.watchStats.Text = string.format("HP %d/%d | Power %s | Kills %s | Tools %d", 
                health, maxHealth, formatNumber(targetPower), formatNumber(targetKills), toolCount)
            statLabels.watchStats.TextColor3 = Theme.text
            
            statLabels.watchPos.Text = string.format("Position: (%.1f, %.1f, %.1f)", 
                position.X, position.Y, position.Z)
            statLabels.watchPos.TextColor3 = Theme.textSecondary
        end
    end)
end

-- Speed Hack Function
local function toggleSpeedHack(enabled, speed)
    if Data.speedConnections then
        for _, conn in pairs(Data.speedConnections) do
            if conn then conn:Disconnect() end
        end
        Data.speedConnections = {}
    end
    
    State.speedHack = enabled
    
    if enabled and player.Character then
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = speed or 50
            -- Keep speed persistent
            table.insert(Data.speedConnections, humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
                if State.speedHack then
                    humanoid.WalkSpeed = speed or 50
                end
            end))
        end
    elseif player.Character then
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = Config.walkSpeed
        end
    end
end

-- Fixed Reverse Damage System
local function setupReverseDamage()
    if Data.reverseDmgConnection then
        Data.reverseDmgConnection:Disconnect()
        Data.reverseDmgConnection = nil
    end
    
    Data.attackerTracking = {}
    
    if not State.reverseDmg or not player.Character then return end
    
    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end
    
    local lastHealth = humanoid.Health
    
    Data.reverseDmgConnection = humanoid.HealthChanged:Connect(function(newHealth)
        if not State.reverseDmg then return end
        
        if newHealth < lastHealth and newHealth > 0 then
            local closestPlayer = nil
            local closestDistance = 50 
            
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                for _, p in pairs(Players:GetPlayers()) do
                    if p ~= player and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
                        local hasTool = false
                        for _, child in pairs(p.Character:GetChildren()) do
                            if child:IsA("Tool") then
                                hasTool = true
                                break
                            end
                        end
                        
                        if hasTool then
                            local dist = (p.Character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
                            if dist < closestDistance then
                                closestDistance = dist
                                closestPlayer = p
                            end
                        end
                    end
                end
            end
            
            if closestPlayer then
                spawn(function()
                    if killPlayer(closestPlayer) then
                        notification("Reversed damage to: " .. closestPlayer.DisplayName, 2, "success")
                    end
                end)
            end
        end
        
        lastHealth = newHealth
    end)
    
    humanoid.Died:Connect(function()
        if State.reverseDmg then
            local killedCount = 0
            for _, p in pairs(Players:GetPlayers()) do
                if p ~= player and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
                    local dist = (p.Character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
                    if dist <= 30 then
                        spawn(function()
                            if killPlayer(p) then
                                killedCount = killedCount + 1
                            end
                        end)
                    end
                end
            end
            if killedCount > 0 then
                notification("Reversed death damage to " .. killedCount .. " nearby players", 3, "success")
            end
        end
    end)
end

-- Enhanced Stats Update with Tool Counting
local powerHistory = {}
local fpsConnection = nil

local function updateStats()
    if not player.Character then return end
    local currentTime = tick()
    local sessionTime = currentTime - Stats.sessionStartTime
    
    if not fpsConnection then
        local frameCount = 0
        local lastTime = tick()
        fpsConnection = Services.Run.RenderStepped:Connect(function()
            frameCount = frameCount + 1
            local now = tick()
            if now - lastTime >= 1 then
                Stats.fps = frameCount
                frameCount = 0
                lastTime = now
            end
        end)
    end
    
    if Services.Stats and Services.Stats.Network and Services.Stats.Network.ServerStatsItem then
        local ping = Services.Stats.Network.ServerStatsItem["Data Ping"]
        if ping then Stats.ping = math.floor(ping:GetValue() or 0) end
    end
    
    local ls = player:FindFirstChild("leaderstats")
    if ls then
        for _, n in ipairs({"Power", "Strength", "Energy", "Points", "Coins"}) do
            local s = ls:FindFirstChild(n) or ls:FindFirstChild(n:lower())
            if s then Stats.power = tonumber(s.Value) or 0 break end
        end
        for _, n in ipairs({"Kills", "KOs", "Eliminations"}) do
            local s = ls:FindFirstChild(n) or ls:FindFirstChild(n:lower())
            if s then Stats.kills = tonumber(s.Value) or 0 break end
        end
    end
    
    if Stats.basePower == 0 then
        Stats.basePower = Stats.power
    end
    
    if State.fastFarm or State.slowFarm or State.autoFarm then
        local gain = Stats.power - (powerHistory[#powerHistory] and powerHistory[#powerHistory].power or Stats.power)
        if gain > 0 then Stats.powerGainedThisSession = Stats.powerGainedThisSession + gain end
        
        table.insert(powerHistory, {time = currentTime, power = Stats.power})
        while #powerHistory > 10 do table.remove(powerHistory, 1) end
        
        if #powerHistory >= 2 then
            local td = powerHistory[#powerHistory].time - powerHistory[1].time
            local pd = powerHistory[#powerHistory].power - powerHistory[1].power
            if td > 0 then
                Stats.powerPerSecond = pd / td
                Stats.powerPerHour = Stats.powerPerSecond * 3600
            end
        end
    end
    
    local h = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
    if h then
        Stats.health = math.floor(h.Health)
        if State.godMode then
            statLabels.health.Text = "Health: INF"
            statLabels.health.TextColor3 = Color3.fromRGB(255, 215, 0)
        else
            local hp = math.floor((Stats.health / h.MaxHealth) * 100)
            statLabels.health.Text = string.format("Health: %d/%d (%d%%)", Stats.health, math.floor(h.MaxHealth), hp)
            statLabels.health.TextColor3 = hp <= 25 and Theme.danger or hp <= 50 and Theme.warning or hp <= 75 and Theme.text or Theme.success
        end
    end
    
    -- Update tool count
    getTools()
    
    statLabels.power.Text = "Power: " .. formatNumber(Stats.power)
    statLabels.kills.Text = "Kills: " .. formatNumber(Stats.kills)
    statLabels.pps.Text = "Power/sec: " .. formatNumber(Stats.powerPerSecond)
    statLabels.pph.Text = "Power/hr: " .. formatNumber(Stats.powerPerHour)
    statLabels.session.Text = "Session: +" .. formatNumber(Stats.powerGainedThisSession)
    statLabels.time.Text = "Time: " .. formatTime(sessionTime)
    statLabels.ping.Text = "Ping: " .. Stats.ping .. "ms"
    statLabels.fps.Text = "FPS: " .. Stats.fps
    
    local eff = "Calculating..."
    local ec = Theme.accent
    if State.fastFarm or State.slowFarm or State.autoFarm then
        if Stats.powerPerHour >= 1e6 then eff, ec = "INSANE", Color3.fromRGB(255, 0, 255)
        elseif Stats.powerPerHour >= 5e5 then eff, ec = "Excellent", Theme.success
        elseif Stats.powerPerHour >= 1e5 then eff, ec = "Good", Theme.success
        else eff, ec = "Low", Theme.danger end
        eff = eff .. " (" .. formatNumber(Stats.powerPerHour) .. "/hr)"
    else
        eff, ec = "Farming OFF", Theme.danger
    end
    statLabels.eff.Text = "Efficiency: " .. eff
    statLabels.eff.TextColor3 = ec
end

-- Forward declare showCommandsUI
local showCommandsUI

-- Enhanced Command System
local cmds = {
    {"cmds", "Shows the command list", function()
        if showCommandsUI then showCommandsUI() end
    end},
    {"scale [percent]", "Adjust UI scale (50-150%)", function(args)
        local scalePercent = tonumber(args[2])
        if scalePercent then
            local newScale = math.clamp(scalePercent / 100, UIScale.minScale, UIScale.maxScale)
            UIScale.userScale = newScale
            scaleInput.Text = tostring(math.floor(newScale * 100 + 0.5)) .. "%"
            rescaleUI()
            notification("UI Scale set to " .. math.floor(newScale * 100 + 0.5) .. "%", 2, "success")
        else
            notification("Usage: ;scale [50-150] (example: ;scale 75)", 3, "warning")
        end
    end},
    {"admin [player]", "Add a command admin", function(args)
        local targetName = args[2]
        if not targetName then
            notification("Usage: ;admin [player_name]", 3, "warning")
            return
        end
        local targetPlayer = findPlayer(targetName)
        if targetPlayer and type(targetPlayer) ~= "table" then
            if table.find(Data.adminPlayers, targetPlayer.Name) then
                notification(targetPlayer.DisplayName .. " is already an admin.", 2, "info")
            else
                table.insert(Data.adminPlayers, targetPlayer.Name)
                notification("Admin added: " .. targetPlayer.DisplayName, 3, "success")
            end
        else
            notification("Player not found: " .. targetName, 3, "error")
        end
    end},
    {"unadmin [player]", "Remove a command admin", function(args)
        local targetName = args[2]
        if not targetName then
            notification("Usage: ;unadmin [player_name]", 3, "warning")
            return
        end
        local targetPlayer = findPlayer(targetName)
        local lowerTargetName = targetName:lower()
        if targetPlayer and type(targetPlayer) ~= "table" then
             lowerTargetName = targetPlayer.Name:lower()
        end

        local foundIndex
        for i, name in ipairs(Data.adminPlayers) do
            if name:lower() == lowerTargetName then
                foundIndex = i
                break
            end
        end

        if foundIndex then
            local removedName = table.remove(Data.adminPlayers, foundIndex)
            notification("Admin removed: " .. (targetPlayer and targetPlayer.DisplayName or removedName), 3, "success")
        else
            notification("Player not found or not an admin: " .. targetName, 2, "error")
        end
    end},
    {"tp/to [player]", "Teleport to player", function(args)
        local t = findPlayer(args[2])
        if t and type(t) ~= "table" and t.Character and player.Character then
            player.Character.HumanoidRootPart.CFrame = t.Character.HumanoidRootPart.CFrame
            notification("Teleported to " .. t.DisplayName, 2, "success")
        else
            notification("Player not found!", 2, "error")
        end
    end},
    {"kill [player/all]", "Kill players", function(args)
        local t = findPlayer(args[2])
        if t then
            if type(t) == "table" then
                local c = 0
                for _, p in pairs(t) do
                    if p ~= player and killPlayer(p) then c = c + 1 end
                end
                notification("Killed " .. c .. " players", 2, "success")
            elseif t == player then
                if t.Character and t.Character:FindFirstChildOfClass("Humanoid") then
                    t.Character.Humanoid.Health = 0
                    notification("You have been killed.", 2, "success")
                end
            else
                if killPlayer(t) then
                    notification("Killed " .. t.DisplayName, 2, "success")
                end
            end
        else
            notification("Player not found: " .. tostring(args[2]), 2, "error")
        end
    end},
    {"god [player/all/me]", "God mode", function(args)
        local t = findPlayer(args[2] or "me")
        if godPlayer(t) then
            notification("God mode applied", 2, "success")
        end
    end},
    {"reversedmg", "Toggle reverse damage", function()
        State.reverseDmg = not State.reverseDmg
        if State.reverseDmg then
            setupReverseDamage()
            notification("Reverse Damage ON - Attackers will die", 3, "success")
        else
            if Data.reverseDmgConnection then
                Data.reverseDmgConnection:Disconnect()
                Data.reverseDmgConnection = nil
            end
            notification("Reverse Damage OFF", 2, "info")
        end
    end},
    {"fly", "Toggle fly", function()
        State.flying = not State.flying
        notification("Fly " .. (State.flying and "ON" or "OFF"), 2, "info")

        if Data.flyConnection then Data.flyConnection:Disconnect(); Data.flyConnection = nil end
        if Data.charDiedFlyConnection then Data.charDiedFlyConnection:Disconnect(); Data.charDiedFlyConnection = nil end
        if Data.flyObjects then
            for _, v in pairs(Data.flyObjects) do if v and v.Parent then v:Destroy() end end
            Data.flyObjects = {}
        end
        if player.Character then
            local h = player.Character:FindFirstChildOfClass("Humanoid")
            if h then h.PlatformStand = false end
        end

        if not State.flying then return end

        local char = player.Character
        if not (char and char:FindFirstChild("HumanoidRootPart")) then
            notification("Cannot fly without a character.", 2, "error")
            State.flying = false
            return
        end

        local humanoid = char:FindFirstChildOfClass("Humanoid")
        local rootPart = char.HumanoidRootPart
        humanoid.PlatformStand = true

        local bv = Instance.new("BodyVelocity", rootPart)
        bv.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
        bv.Velocity = Vector3.new(0, 0, 0)

        local bg = Instance.new("BodyGyro", rootPart)
        bg.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
        bg.D = 100
        bg.P = 10000
        bg.CFrame = rootPart.CFrame

        Data.flyObjects = {bv = bv, bg = bg}

        Data.flyConnection = Services.Run.Heartbeat:Connect(function()
            if not State.flying or not Data.flyObjects.bv or not Data.flyObjects.bv.Parent then
                if Data.flyConnection then Data.flyConnection:Disconnect(); Data.flyConnection = nil end
                return
            end
            local cam = workspace.CurrentCamera
            local moveVector = Vector3.new(0, 0, 0)
            if Services.UIS:IsKeyDown(Enum.KeyCode.W) then moveVector = moveVector + cam.CFrame.LookVector end
            if Services.UIS:IsKeyDown(Enum.KeyCode.S) then moveVector = moveVector - cam.CFrame.LookVector end
            if Services.UIS:IsKeyDown(Enum.KeyCode.A) then moveVector = moveVector - cam.CFrame.RightVector end
            if Services.UIS:IsKeyDown(Enum.KeyCode.D) then moveVector = moveVector + cam.CFrame.RightVector end
            if Services.UIS:IsKeyDown(Enum.KeyCode.Space) then moveVector = moveVector + Vector3.new(0, 1, 0) end
            if Services.UIS:IsKeyDown(Enum.KeyCode.LeftShift) then moveVector = moveVector - Vector3.new(0, 1, 0) end
            if moveVector.Magnitude > 0 then
                Data.flyObjects.bv.Velocity = moveVector.Unit * Config.flySpeed
            else
                Data.flyObjects.bv.Velocity = Vector3.new(0, 0, 0)
            end
            Data.flyObjects.bg.CFrame = cam.CFrame
        end)
        
        Data.charDiedFlyConnection = humanoid.Died:Connect(function()
            State.flying = false
            notification("Fly disabled due to death.", 2, "info")
            if Data.flyConnection then Data.flyConnection:Disconnect(); Data.flyConnection = nil end
            if Data.charDiedFlyConnection then Data.charDiedFlyConnection:Disconnect(); Data.charDiedFlyConnection = nil end
        end)
    end},
    {"unfly", "Disable fly", function()
        if State.flying then
            State.flying = false
            if Data.flyConnection then Data.flyConnection:Disconnect(); Data.flyConnection = nil end
            if Data.charDiedFlyConnection then Data.charDiedFlyConnection:Disconnect(); Data.charDiedFlyConnection = nil end
            if Data.flyObjects then
                for _, v in pairs(Data.flyObjects) do if v and v.Parent then v:Destroy() end end
                Data.flyObjects = {}
            end
            if player.Character then
                local h = player.Character:FindFirstChildOfClass("Humanoid")
                if h then h.PlatformStand = false end
            end
            notification("Fly disabled", 2, "info")
        else
            notification("Fly is already disabled", 2, "info")
        end
    end},
    {"noclip", "Toggle noclip", function()
        State.noclip = not State.noclip
        notification("Noclip " .. (State.noclip and "ON" or "OFF"), 2, "info")
        if State.noclip then
            Data.noclipConnection = Services.Run.Stepped:Connect(function()
                if player.Character then
                    for _, p in pairs(player.Character:GetDescendants()) do
                        if p:IsA("BasePart") and p.CanCollide then p.CanCollide = false end
                    end
                end
            end)
        else
            if Data.noclipConnection then Data.noclipConnection:Disconnect(); Data.noclipConnection = nil end
        end
    end},
    {"unnoclip", "Disable noclip", function()
        if State.noclip then
            State.noclip = false
            if Data.noclipConnection then Data.noclipConnection:Disconnect(); Data.noclipConnection = nil end
            notification("Noclip disabled", 2, "info")
        else
            notification("Noclip is already disabled", 2, "info")
        end
    end},
    {"speed/ws [num]", "Set walkspeed", function(args)
        local s = tonumber(args[2]) or 16
        toggleSpeedHack(s ~= 16, s)
        notification("Speed set to " .. s, 2, "success")
    end},
    {"unspeed", "Reset walkspeed", function()
        toggleSpeedHack(false)
        notification("Speed reset to normal", 2, "info")
    end},
    {"watch [player]", "Monitor a player's stats", function(args)
        if not args[2] then
            notification("Usage: ;watch [player_name]", 3, "warning")
            return
        end
        watchPlayer(args[2])
    end},
    {"unwatch", "Stop watching player", function()
        if Data.watchConnection then
            Data.watchConnection:Disconnect()
            Data.watchConnection = nil
            State.watchingPlayer = nil
            if statLabels.watch then
                statLabels.watch.Text = "Not watching anyone"
                statLabels.watch.TextColor3 = Theme.warning
            end
            notification("Stopped watching player", 2, "info")
        else
            notification("Not watching any player", 2, "info")
        end
    end},
    {"reset", "Reset character", function()
        if player.Character then
            local h = player.Character:FindFirstChildOfClass("Humanoid")
            if h then h.Health = 0 end
        end
    end}
}

-- Command Debounce & Execution
local lastCommandFired = ""
local lastCommandTime = 0
local commandDebounce = 0.2

local function executeCmd(cmd)
    local currentTime = tick()
    if cmd == lastCommandFired and currentTime - lastCommandTime < commandDebounce then
        return
    end
    lastCommandFired = cmd
    lastCommandTime = currentTime

    if not cmd or cmd == "" then return end
    if cmd:sub(1, 1) == Config.commandPrefix then cmd = cmd:sub(2) end
    local args = {}
    for a in cmd:gmatch("%S+") do table.insert(args, a) end
    if #args == 0 then return end
    local cmdName = args[1]:lower()
    
    for _, c in ipairs(cmds) do
        local cmdPattern = c[1]:split(" ")[1]
        local found = false
        if cmdPattern:find("/") then
            for alt in cmdPattern:gmatch("[^/]+") do
                if alt == cmdName then found = true; break end
            end
        elseif cmdPattern == cmdName then
            found = true
        end
        if found then pcall(c[3], args); return end
    end
    notification("Unknown command: " .. cmdName, 2, "error")
end

-- Enhanced UI Creation Functions
local function createToggle(text, callback, showSpeed)
    local f = Instance.new("Frame")
    f.Size = UDim2.new(1, -S(10), 0, S(isMobile and 45 or 55))
    f.BackgroundColor3 = Theme.tertiary
    f.Parent = content
    addCornerAndStroke(f, S(8), Theme.border)
    createScalableElement(f, UDim2.new(1, -10, 0, isMobile and 45 or 55), nil, nil, 8)
    
    local l = Instance.new("TextLabel")
    l.Size = UDim2.new(1, showSpeed and -S(isMobile and 120 or 140) or -S(isMobile and 70 or 80), 1, 0)
    l.Position = UDim2.new(0, S(15), 0, 0)
    l.BackgroundTransparency = 1
    l.Text = text
    l.TextColor3 = Theme.text
    l.TextSize = S(isMobile and 12 or 14)
    l.Font = Enum.Font.SourceSans
    l.TextXAlignment = Enum.TextXAlignment.Left
    l.Parent = f
    createScalableElement(l, 
        UDim2.new(1, showSpeed and -(isMobile and 120 or 140) or -(isMobile and 70 or 80), 1, 0),
        UDim2.new(0, 15, 0, 0), isMobile and 12 or 14)
    
    local si
    if showSpeed then
        si = Instance.new("TextBox")
        si.Size = UDim2.new(0, S(isMobile and 35 or 45), 0, S(isMobile and 20 or 25))
        si.Position = UDim2.new(1, -S(isMobile and 100 or 115), 0.5, -S(isMobile and 10 or 12.5))
        si.BackgroundColor3 = Theme.secondary
        si.Text = tostring(Config.speed)
        si.TextColor3 = Theme.text
        si.TextSize = S(isMobile and 10 or 12)
        si.Font = Enum.Font.SourceSans
        si.Parent = f
        addCornerAndStroke(si, S(4))
        createScalableElement(si,
            UDim2.new(0, isMobile and 35 or 45, 0, isMobile and 20 or 25),
            UDim2.new(1, -(isMobile and 100 or 115), 0.5, -(isMobile and 10 or 12.5)),
            isMobile and 10 or 12, 4)
        
        -- Enhanced speed input connection with increased maximum to 100
        si.FocusLost:Connect(function(enterPressed)
            local n = tonumber(si.Text)
            if n and n >= 1 and n <= 100 then  -- Increased from 50 to 100
                Config.speed = n
                notification("Farm speed set to: " .. n, 2, "success")
            else 
                si.Text = tostring(Config.speed)
                notification("Invalid speed! Use 1-100", 2, "warning")  -- Updated message
            end
        end)
    end
    
    local t = Instance.new("TextButton")
    t.Size = UDim2.new(0, S(isMobile and 50 or 60), 0, S(isMobile and 25 or 30))
    t.Position = UDim2.new(1, -S(isMobile and 60 or 70), 0.5, -S(isMobile and 12.5 or 15))
    t.BackgroundColor3 = Theme.danger
    t.Text = "OFF"
    t.TextColor3 = Theme.text
    t.TextSize = S(isMobile and 10 or 12)
    t.Font = Enum.Font.SourceSansBold
    t.Parent = f
    addCornerAndStroke(t, S(6))
    createScalableElement(t,
        UDim2.new(0, isMobile and 50 or 60, 0, isMobile and 25 or 30),
        UDim2.new(1, -(isMobile and 60 or 70), 0.5, -(isMobile and 12.5 or 15)),
        isMobile and 10 or 12, 6)
    
    local enabled = false
    t.MouseButton1Click:Connect(function()
        enabled = not enabled
        t.BackgroundColor3 = enabled and Theme.success or Theme.danger
        t.Text = enabled and "ON" or "OFF"
        callback(enabled)
    end)
    return f, t, si
end

local function createButton(text, callback, color)
    local b = Instance.new("TextButton")
    b.Size = UDim2.new(1, -S(10), 0, S(isMobile and 40 or 50))
    b.BackgroundColor3 = color or Theme.accent
    b.Text = text
    b.TextColor3 = Theme.text
    b.TextSize = S(isMobile and 12 or 14)
    b.Font = Enum.Font.SourceSansBold
    b.Parent = content
    addCornerAndStroke(b, S(8), Theme.border)
    createScalableElement(b,
        UDim2.new(1, -10, 0, isMobile and 40 or 50), nil,
        isMobile and 12 or 14, 8)
    b.MouseButton1Click:Connect(callback)
    return b
end

-- Command List UI Function (Enhanced)
showCommandsUI = function()
    if screenGui:FindFirstChild("CommandsFrame") then return end

    local cf = Instance.new("Frame")
    cf.Name = "CommandsFrame"
    cf.Size = UDim2.new(0, S(isMobile and 350 or 450), 0, S(isMobile and 400 or 550))
    cf.Position = UDim2.new(0.5, -S(isMobile and 175 or 225), 0.5, -S(isMobile and 200 or 275))
    cf.BackgroundColor3 = Theme.background
    cf.Parent = screenGui
    addCornerAndStroke(cf, S(12), Theme.border)
    
    local ch = Instance.new("Frame")
    ch.Size = UDim2.new(1, 0, 0, S(isMobile and 45 or 55))
    ch.BackgroundColor3 = Theme.secondary
    ch.Parent = cf
    makeDraggable(cf, ch)
    addCornerAndStroke(ch, S(12))
    
    local ct = Instance.new("TextLabel")
    ct.Size = UDim2.new(1, -S(50), 1, 0)
    ct.Position = UDim2.new(0, S(15), 0, 0)
    ct.BackgroundTransparency = 1
    ct.Text = "Commands"
    ct.TextColor3 = Theme.text
    ct.TextSize = S(isMobile and 16 or 20)
    ct.Font = Enum.Font.SourceSansBold
    ct.TextXAlignment = Enum.TextXAlignment.Left
    ct.Parent = ch
    
    local cx = Instance.new("TextButton")
    cx.Size = UDim2.new(0, S(isMobile and 25 or 35), 0, S(isMobile and 25 or 35))
    cx.Position = UDim2.new(1, -S(isMobile and 35 or 45), 0, S(isMobile and 10 or 10))
    cx.BackgroundColor3 = Theme.danger
    cx.Text = "X"
    cx.TextColor3 = Theme.text
    cx.TextSize = S(isMobile and 12 or 16)
    cx.Font = Enum.Font.SourceSansBold
    cx.Parent = ch
    addCornerAndStroke(cx, S(6))
    cx.MouseButton1Click:Connect(function() cf:Destroy() end)
    
    local cs = Instance.new("ScrollingFrame")
    cs.Size = UDim2.new(1, -S(20), 1, -S(isMobile and 65 or 75))
    cs.Position = UDim2.new(0, S(10), 0, S(isMobile and 55 or 65))
    cs.BackgroundColor3 = Theme.secondary
    cs.BorderSizePixel = 0
    cs.ScrollBarThickness = S(isMobile and 8 or 6)
    cs.ScrollBarImageColor3 = Theme.accent
    cs.AutomaticCanvasSize = Enum.AutomaticSize.Y
    cs.Parent = cf
    addCornerAndStroke(cs, S(8))

    local listLayout = Instance.new("UIListLayout")
    listLayout.Padding = UDim.new(0, S(5))
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.Parent = cs
    
    for i, c in ipairs(cmds) do
        local ci = Instance.new("Frame")
        ci.Size = UDim2.new(1, 0, 0, S(isMobile and 45 or 55))
        ci.BackgroundColor3 = Theme.tertiary
        ci.LayoutOrder = i
        ci.Parent = cs
        addCornerAndStroke(ci, S(8), Theme.border)
        
        local cn = Instance.new("TextLabel")
        cn.Size = UDim2.new(1, -S(20), 0, S(isMobile and 20 or 28))
        cn.Position = UDim2.new(0, S(10), 0, S(3))
        cn.BackgroundTransparency = 1
        cn.Text = Config.commandPrefix .. c[1]
        cn.TextColor3 = Theme.text
        cn.TextSize = S(isMobile and 12 or 14)
        cn.Font = Enum.Font.SourceSansBold
        cn.TextXAlignment = Enum.TextXAlignment.Left
        cn.Parent = ci
        
        local cd = Instance.new("TextLabel")
        cd.Size = UDim2.new(1, -S(20), 0, S(isMobile and 18 or 22))
        cd.Position = UDim2.new(0, S(10), 0, S(isMobile and 22 or 28))
        cd.BackgroundTransparency = 1
        cd.Text = c[2]
        cd.TextColor3 = Theme.textSecondary
        cd.TextSize = S(isMobile and 10 or 12)
        cd.Font = Enum.Font.SourceSans
        cd.TextXAlignment = Enum.TextXAlignment.Left
        cd.Parent = ci
    end
end

-- Create UI Elements with Enhanced Speed Input (Maximum 100)
createToggle("Fast Farm", function(e)
    State.fastFarm = e
    if e and State.slowFarm then State.slowFarm = false end
    notification("Fast Farm " .. (e and "ON" or "OFF"), 2, e and "success" or "info")
end, true)

createToggle("Slow Farm", function(e)
    State.slowFarm = e
    if e and State.fastFarm then State.fastFarm = false end
    notification("Slow Farm " .. (e and "ON" or "OFF"), 2, e and "success" or "info")
end)

createToggle("God Mode", function(e)
    State.godMode = e
    notification("God Mode " .. (e and "ON" or "OFF"), 2, e and "success" or "info")
    if e then
        spawn(function()
            while State.godMode and player.Character do godPlayer(player); wait(0.3) end
        end)
    end
end)

createToggle("Kill Aura", function(e)
    State.killAura = e
    notification("Kill Aura " .. (e and "ON" or "OFF"), 2, e and "success" or "info")
end)

createToggle("Reverse Damage", function(e)
    executeCmd(";reversedmg")
end)

createButton("Kill All Players", function() executeCmd(";kill all") end, Theme.danger)
createButton("God All Players", function() executeCmd(";god others") end, Theme.success)
createButton("Reset Session Stats", function()
    Stats.powerGainedThisSession = 0
    Stats.sessionStartTime = tick()
    Stats.basePower = Stats.power
    powerHistory = {}
    notification("Session stats reset!", 3, "success")
end, Theme.warning)
createButton("Show Commands", showCommandsUI, Theme.accent)

-- Enhanced Command Bar Logic with Modern Animations
local function showCmd()
    if State.commandBarVisible then return end
    State.commandBarVisible = true
    commandBar.Visible = true
    
    -- Enhanced slide-up animation with bounce effect
    Services.Tween:Create(commandBar, TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.Out),
        {Position = UDim2.new(0.5, -S(isMobile and 190 or 325), 1, -S(isMobile and 80 or 90))}):Play()
    
    -- Glow effect animation
    local stroke = commandBar:FindFirstChildOfClass("UIStroke")
    if stroke then
        Services.Tween:Create(stroke, TweenInfo.new(0.3),
            {Color = Theme.accent, Transparency = 0}):Play()
    end
    
    cmdInput:CaptureFocus()
end

local function hideCmd()
    if not State.commandBarVisible then return end
    State.commandBarVisible = false
    cmdInput:ReleaseFocus()
    
    -- Remove glow effect
    local stroke = commandBar:FindFirstChildOfClass("UIStroke")
    if stroke then
        Services.Tween:Create(stroke, TweenInfo.new(0.2),
            {Color = Theme.glassBorder, Transparency = 0}):Play()
    end
    
    Services.Tween:Create(commandBar, TweenInfo.new(0.3, Enum.EasingStyle.Quart),
        {Position = UDim2.new(0.5, -S(isMobile and 190 or 325), 1, S(100))}):Play(nil, function()
            if not State.commandBarVisible then commandBar.Visible = false end
        end)
end

execBtn.MouseButton1Click:Connect(function()
    executeCmd(Config.commandPrefix .. cmdInput.Text)
    cmdInput.Text = ""
    hideCmd()
end)

cmdInput.FocusLost:Connect(function(enter)
    if enter then
        executeCmd(Config.commandPrefix .. cmdInput.Text)
        cmdInput.Text = ""
    end
    hideCmd()
end)

-- Enhanced Input Handler
Services.UIS.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == Enum.KeyCode.Semicolon and not cmdInput:IsFocused() then
        showCmd()
        task.wait()
        cmdInput.Text = ""
    elseif input.KeyCode == Enum.KeyCode.Escape and State.commandBarVisible then
        hideCmd()
    elseif input.KeyCode == Enum.KeyCode.Insert then
        mainFrame.Visible = not mainFrame.Visible
    elseif input.KeyCode == Enum.KeyCode.Minus then
        -- Quick scale down with minus key
        local newScale = math.clamp(UIScale.userScale - 0.1, UIScale.minScale, UIScale.maxScale)
        UIScale.userScale = newScale
        scaleInput.Text = tostring(math.floor(newScale * 100 + 0.5)) .. "%"
        rescaleUI()
        notification("UI Scale: " .. math.floor(newScale * 100 + 0.5) .. "%", 1, "info")
    elseif input.KeyCode == Enum.KeyCode.Equals then
        -- Quick scale up with equals/plus key
        local newScale = math.clamp(UIScale.userScale + 0.1, UIScale.minScale, UIScale.maxScale)
        UIScale.userScale = newScale
        scaleInput.Text = tostring(math.floor(newScale * 100 + 0.5)) .. "%"
        rescaleUI()
        notification("UI Scale: " .. math.floor(newScale * 100 + 0.5) .. "%", 1, "info")
    end
end)

closeBtn.MouseButton1Click:Connect(function()
    State.flying = false
    executeCmd(";unfly")
    for _, c in pairs(Data.connections) do if c then c:Disconnect() end end
    if Data.noclipConnection then Data.noclipConnection:Disconnect() end
    if Data.reverseDmgConnection then Data.reverseDmgConnection:Disconnect() end
    if Data.watchConnection then Data.watchConnection:Disconnect() end
    for _, conn in pairs(Data.speedConnections) do if conn then conn:Disconnect() end end
    if fpsConnection then fpsConnection:Disconnect() end
    screenGui:Destroy()
end)

-- Main Loop (Optimized)
local lastLoop = 0
local mainLoop = Services.Run.Heartbeat:Connect(function()
    local t = tick()
    if t - lastLoop < 0.033 then return end
    lastLoop = t
    pcall(updateStats)
    if not player.Character then return end
    local char = player.Character
    local h = char:FindFirstChildOfClass("Humanoid")
    local rp = char:FindFirstChild("HumanoidRootPart")
    if not h or not rp or h.Health <= 0 then return end
    if State.fastFarm then farm(Config.speed)
    elseif State.slowFarm then farm(2) end
    if State.killAura then
        for _, p in pairs(Players:GetPlayers()) do
            if p ~= player and p.Character and p.Character:FindFirstChild("HumanoidRootPart") and p.Character:FindFirstChildOfClass("Humanoid").Health > 0 then
                if (rp.Position - p.Character.HumanoidRootPart.Position).Magnitude <= Config.range then
                    killPlayer(p)
                end
            end
        end
    end
end)
table.insert(Data.connections, mainLoop)

-- Character Handler (Enhanced)
local function onChar(char)
    wait(1)
    if not char then return end
    local h = char:WaitForChild("Humanoid", 5)
    if h then
        h.WalkSpeed = State.speedHack and (Config.flySpeed or 50) or Config.walkSpeed
        h.JumpPower = Config.jumpPower
        if State.reverseDmg then setupReverseDamage() end
        if State.speedHack then toggleSpeedHack(true, Config.flySpeed or 50) end
        if State.noclip and Data.noclipConnection then
            Data.noclipConnection:Disconnect()
            Data.noclipConnection = Services.Run.Stepped:Connect(function()
                if player.Character then
                    for _, p in pairs(player.Character:GetDescendants()) do
                        if p:IsA("BasePart") and p.CanCollide then p.CanCollide = false end
                    end
                end
            end)
        end
    end
end
player.CharacterAdded:Connect(onChar)
if player.Character then onChar(player.Character) end

-- Init
table.insert(Data.adminPlayers, player.Name)
Stats.sessionStartTime = tick()
commandBar.Visible = false

-- Chat commands (Enhanced)
local function processMessage(msg)
    if msg.Text:sub(1, 1) == Config.commandPrefix then
        local sourcePlayer = Players:GetPlayerByUserId(msg.TextSource.UserId)
        if sourcePlayer and (sourcePlayer == player or table.find(Data.adminPlayers, sourcePlayer.Name)) then
            spawn(function() executeCmd(msg.Text) end)
            return true
        end
    end
    return false
end

if Services.TextChat and Services.TextChat.ChatVersion == Enum.ChatVersion.TextChatService then
    pcall(function()
        local textChatService = Services.TextChat
        textChatService.OnIncomingMessage = function(message)
            if message.Status ~= Enum.TextChatMessageStatus.Success then return end
            processMessage(message)
        end
    end)
else
    player.Chatted:Connect(function(msg)
        spawn(function() executeCmd(msg) end)
    end)
end

-- Viewport Size Change Handler (for responsive scaling)
workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(function()
    wait(0.1) -- Small delay to prevent rapid firing
    rescaleUI()
    notification("UI auto-resized for screen", 1, "info")
end)

-- Enhanced Startup Animation
spawn(function()
    mainFrame.Position = UDim2.new(0.5, -S(isMobile and 175 or 225), 1.5, 0)
    wait(0.5)
    notification("2take1 Hub Enhanced - Loaded!", 3, "success")
    Services.Tween:Create(mainFrame, TweenInfo.new(0.8, Enum.EasingStyle.Back),
        {Position = UDim2.new(0.5, -S(isMobile and 175 or 225), 0.5, -S(isMobile and 275 or 350))}):Play()
    wait(1)
    notification("Press ; for commands", 3, "info")
    wait(1)
    notification("Press Insert to toggle GUI", 3, "info")
    wait(1)
    notification("Use Scale box or -/+ keys to resize UI", 3, "info")
    wait(1)
    notification("Auto-farm speed limit increased to 100!", 3, "success")
    if isMobile then
        wait(1)
        notification("Mobile-optimized UI ready!", 3, "success")
    end
end)
