local Players = game:GetService("Players")
local player = Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local UIS = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local StarterGui = game:GetService("StarterGui")

-- Wait for game to load
if not game:IsLoaded() then
    game.Loaded:Wait()
end

-- Configuration
local Config = {
    speed = 5,
    range = 15,
    walkSpeed = 16,
    jumpPower = 50,
    flySpeed = 50,
    commandPrefix = ";",
    antiLagEnabled = true,
    performanceMode = false,
    whitelistedIds = {1234567, 7654321} -- <-- ADD USER IDS FOR AUTO-ADMIN HERE
}

-- State Management
local State = {
    fastFarm = false,
    slowFarm = false,
    godMode = false,
    killAura = false,
    flying = false,
    noclip = false,
    commandBarVisible = false,
    loopKill = false,
    loopKillTargets = {},
    killAllActive = false,
    esp = false,
    infiniteJump = false
}

-- Statistics
local Stats = {
    power = 0,
    kills = 0,
    health = 100,
    powerGainedThisSession = 0,
    sessionStartTime = tick(),
    lastPowerCheck = 0,
    powerPerSecond = 0,
    powerPerHour = 0,
    lastUpdateTime = tick()
}

-- Data Storage
local Data = {
    adminPlayers = {},
    connections = {},
    flyObjects = {},
    killAllTargets = {},
    noclipConnection = nil,
    flyConnection = nil,
    espObjects = {},
    chatConnection = nil
}

-- Theme Configuration
local Theme = {
    background = Color3.fromRGB(25, 25, 25),
    secondary = Color3.fromRGB(35, 35, 35),
    tertiary = Color3.fromRGB(45, 45, 45),
    accent = Color3.fromRGB(88, 101, 242),
    text = Color3.fromRGB(255, 255, 255),
    success = Color3.fromRGB(87, 242, 135),
    danger = Color3.fromRGB(237, 66, 69),
    warning = Color3.fromRGB(255, 193, 7)
}

-- Protect GUI Function
local function protectGui(gui)
    if syn and syn.protect_gui then
        syn.protect_gui(gui)
    elseif gethui then
        gui.Parent = gethui()
        return
    end
    local success, coreGui = pcall(function() return game:GetService("CoreGui") end)
    if success and coreGui then
        gui.Parent = coreGui
    else
        gui.Parent = player:WaitForChild("PlayerGui")
    end
end

-- Create Main GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "2take1Hub"
screenGui.ResetOnSpawn = false
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
protectGui(screenGui)

-- Sound Effects
local sounds = {
    hover = Instance.new("Sound"),
    click = Instance.new("Sound"),
    toggle = Instance.new("Sound")
}
sounds.hover.SoundId = "rbxassetid://10066936758"
sounds.hover.Volume = 0.3
sounds.hover.Parent = screenGui
sounds.click.SoundId = "rbxassetid://876939830"
sounds.click.Volume = 0.4
sounds.click.Parent = screenGui
sounds.toggle.SoundId = "rbxassetid://10066936276"
sounds.toggle.Volume = 0.3
sounds.toggle.Parent = screenGui

-- Utility Functions
local function playSound(soundName)
    local sound = sounds[soundName]
    if sound then sound:Play() end
end

local function notification(text, duration)
    duration = duration or 3
    pcall(function()
        StarterGui:SetCore("SendNotification", {
            Title = "2take1 Hub",
            Text = text,
            Duration = duration,
            Icon = "rbxassetid://7733964640"
        })
    end)
end

local function formatNumber(num)
    if num >= 1e9 then
        return string.format("%.2fB", num / 1e9)
    elseif num >= 1e6 then
        return string.format("%.2fM", num / 1e6)
    elseif num >= 1e3 then
        return string.format("%.2fK", num / 1e3)
    else
        return tostring(math.floor(num))
    end
end

local function formatTime(seconds)
    local hours = math.floor(seconds / 3600)
    local minutes = math.floor((seconds % 3600) / 60)
    local secs = math.floor(seconds % 60)
    return string.format("%02d:%02d:%02d", hours, minutes, secs)
end

-- Enhanced Draggable Function
local function makeDraggable(frame, handle)
    handle = handle or frame
    local dragging = false
    local dragStart = nil
    local startPos = nil

    local function update(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(
            startPos.X.Scale, startPos.X.Offset + delta.X,
            startPos.Y.Scale, startPos.Y.Offset + delta.Y
        )
    end

    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    handle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            if dragging then
                update(input)
            end
        end
    end)
end

-- Command Bar Creation
local commandBarFrame = Instance.new("Frame")
commandBarFrame.Name = "CommandBar"
commandBarFrame.Size = UDim2.new(0, 500, 0, 50)
commandBarFrame.Position = UDim2.new(0.5, -250, 0, -60)
commandBarFrame.BackgroundColor3 = Theme.background
commandBarFrame.BorderSizePixel = 0
commandBarFrame.Visible = true
commandBarFrame.Parent = screenGui

local commandBarCorner = Instance.new("UICorner")
commandBarCorner.CornerRadius = UDim.new(0, 12)
commandBarCorner.Parent = commandBarFrame

local commandBarStroke = Instance.new("UIStroke")
commandBarStroke.Thickness = 2
commandBarStroke.Color = Theme.accent
commandBarStroke.Parent = commandBarFrame

local glowFrame = Instance.new("Frame")
glowFrame.Size = UDim2.new(1, 4, 1, 4)
glowFrame.Position = UDim2.new(0, -2, 0, -2)
glowFrame.BackgroundColor3 = Theme.accent
glowFrame.BackgroundTransparency = 0.8
glowFrame.BorderSizePixel = 0
glowFrame.ZIndex = -1
glowFrame.Parent = commandBarFrame

local glowCorner = Instance.new("UICorner")
glowCorner.CornerRadius = UDim.new(0, 14)
glowCorner.Parent = glowFrame

local cmdIcon = Instance.new("TextLabel")
cmdIcon.Size = UDim2.new(0, 40, 1, 0)
cmdIcon.Position = UDim2.new(0, 5, 0, 0)
cmdIcon.BackgroundTransparency = 1
cmdIcon.Text = "⚡"
cmdIcon.TextColor3 = Theme.accent
cmdIcon.TextSize = 20
cmdIcon.Font = Enum.Font.SourceSansBold
cmdIcon.Parent = commandBarFrame

local cmdLabel = Instance.new("TextLabel")
cmdLabel.Size = UDim2.new(0, 80, 1, -10)
cmdLabel.Position = UDim2.new(0, 45, 0, 5)
cmdLabel.BackgroundTransparency = 1
cmdLabel.Text = "Command:"
cmdLabel.TextColor3 = Theme.text
cmdLabel.TextSize = 14
cmdLabel.Font = Enum.Font.SourceSansBold
cmdLabel.TextXAlignment = Enum.TextXAlignment.Left
cmdLabel.Parent = commandBarFrame

local commandInput = Instance.new("TextBox")
commandInput.Size = UDim2.new(1, -210, 1, -16)
commandInput.Position = UDim2.new(0, 130, 0, 8)
commandInput.BackgroundColor3 = Theme.secondary
commandInput.BorderSizePixel = 0
commandInput.Text = ""
commandInput.PlaceholderText = "Enter command here..."
commandInput.TextColor3 = Theme.text
commandInput.PlaceholderColor3 = Color3.fromRGB(120, 120, 120)
commandInput.TextSize = 14
commandInput.Font = Enum.Font.SourceSans
commandInput.ClearTextOnFocus = false
commandInput.Parent = commandBarFrame

local inputCorner = Instance.new("UICorner")
inputCorner.CornerRadius = UDim.new(0, 8)
inputCorner.Parent = commandInput

local executeButton = Instance.new("TextButton")
executeButton.Size = UDim2.new(0, 70, 0, 34)
executeButton.Position = UDim2.new(1, -78, 0, 8)
executeButton.BackgroundColor3 = Theme.accent
executeButton.Text = "⚡ Run"
executeButton.TextColor3 = Theme.text
executeButton.TextSize = 12
executeButton.Font = Enum.Font.SourceSansBold
executeButton.BorderSizePixel = 0
executeButton.Parent = commandBarFrame

local executeCorner = Instance.new("UICorner")
executeCorner.CornerRadius = UDim.new(0, 8)
executeCorner.Parent = executeButton

-- Main Frame Creation
local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 400, 0, 600)
mainFrame.Position = UDim2.new(0.5, -200, 0.5, -300)
mainFrame.BackgroundColor3 = Theme.background
mainFrame.BorderSizePixel = 0
mainFrame.Active = true
mainFrame.Parent = screenGui

local mainCorner = Instance.new("UICorner")
mainCorner.CornerRadius = UDim.new(0, 12)
mainCorner.Parent = mainFrame

local mainStroke = Instance.new("UIStroke")
mainStroke.Thickness = 2
mainStroke.Color = Theme.accent
mainStroke.Transparency = 0.5
mainStroke.Parent = mainFrame

-- Header
local header = Instance.new("Frame")
header.Size = UDim2.new(1, 0, 0, 40)
header.BackgroundColor3 = Theme.secondary
header.BorderSizePixel = 0
header.Parent = mainFrame
makeDraggable(mainFrame, header)

local headerCorner = Instance.new("UICorner")
headerCorner.CornerRadius = UDim.new(0, 12)
headerCorner.Parent = header

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, -40, 1, 0)
title.Position = UDim2.new(0, 10, 0, 0)
title.BackgroundTransparency = 1
title.Text = "2take1 Hub 2025"
title.TextColor3 = Theme.text
title.TextSize = 16
title.Font = Enum.Font.SourceSansBold
title.TextXAlignment = Enum.TextXAlignment.Left
title.Parent = header

local closeButton = Instance.new("TextButton")
closeButton.Size = UDim2.new(0, 30, 0, 30)
closeButton.Position = UDim2.new(1, -35, 0, 5)
closeButton.BackgroundColor3 = Theme.danger
closeButton.Text = "X"
closeButton.TextColor3 = Theme.text
closeButton.TextSize = 14
closeButton.Font = Enum.Font.SourceSansBold
closeButton.Parent = header

local closeCorner = Instance.new("UICorner")
closeCorner.CornerRadius = UDim.new(0, 6)
closeCorner.Parent = closeButton

-- Content
local content = Instance.new("ScrollingFrame")
content.Size = UDim2.new(1, -20, 1, -60)
content.Position = UDim2.new(0, 10, 0, 50)
content.BackgroundColor3 = Theme.secondary
content.BorderSizePixel = 0
content.ScrollBarThickness = 6
content.ScrollBarImageColor3 = Theme.accent
content.CanvasSize = UDim2.new(0, 0, 0, 0)
content.AutomaticCanvasSize = Enum.AutomaticSize.Y
content.Parent = mainFrame

local contentCorner = Instance.new("UICorner")
contentCorner.CornerRadius = UDim.new(0, 8)
contentCorner.Parent = content

local layout = Instance.new("UIListLayout")
layout.Padding = UDim.new(0, 10)
layout.Parent = content

-- Stats Frame
local statsFrame = Instance.new("Frame")
statsFrame.Size = UDim2.new(1, -10, 0, 150)
statsFrame.BackgroundColor3 = Theme.tertiary
statsFrame.BorderSizePixel = 0
statsFrame.Parent = content

local statsCorner = Instance.new("UICorner")
statsCorner.CornerRadius = UDim.new(0, 8)
statsCorner.Parent = statsFrame

local statsTitle = Instance.new("TextLabel")
statsTitle.Size = UDim2.new(1, -10, 0, 25)
statsTitle.Position = UDim2.new(0, 5, 0, 5)
statsTitle.BackgroundTransparency = 1
statsTitle.Text = "📊 Player Stats"
statsTitle.TextColor3 = Theme.accent
statsTitle.TextSize = 16
statsTitle.Font = Enum.Font.SourceSansBold
statsTitle.TextXAlignment = Enum.TextXAlignment.Left
statsTitle.Parent = statsFrame

-- Create stat labels
local statLabels = {}
local statPositions = {
    {name = "power", icon = "⚡", pos = UDim2.new(0, 10, 0, 30)},
    {name = "kills", icon = "💀", pos = UDim2.new(0.52, 0, 0, 30)},
    {name = "health", icon = "❤️", pos = UDim2.new(0, 10, 0, 55)},
    {name = "powerPerSec", icon = "⏱️", pos = UDim2.new(0.52, 0, 0, 55)},
    {name = "powerPerHour", icon = "🕐", pos = UDim2.new(0, 10, 0, 80)},
    {name = "session", icon = "📈", pos = UDim2.new(0.52, 0, 0, 80)},
    {name = "sessionTime", icon = "⏰", pos = UDim2.new(0, 10, 0, 105), size = UDim2.new(1, -20, 0, 20)},
    {name = "efficiency", icon = "⚡", pos = UDim2.new(0, 10, 0, 125), size = UDim2.new(1, -20, 0, 20)}
}
for _, stat in ipairs(statPositions) do
    local label = Instance.new("TextLabel")
    label.Size = stat.size or UDim2.new(0.48, 0, 0, 20)
    label.Position = stat.pos
    label.BackgroundTransparency = 1
    label.Text = stat.icon .. " Loading..."
    label.TextColor3 = Theme.text
    label.TextSize = 12
    label.Font = Enum.Font.SourceSans
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = statsFrame
    statLabels[stat.name] = label
end

-- Real-time Stats Tracking
local statsCache = {
    lastPower = 0,
    lastKills = 0,
    powerHistory = {},
    updateCount = 0,
    smoothedPowerPerSec = 0,
    instantPowerPerSec = 0
}

-- Forward declaration for updateStats
local updateStats

-- NEW: Function to reset farming stats instantly
local function resetFarmingStats()
    statsCache.powerHistory = {}
    statsCache.smoothedPowerPerSec = 0
    statsCache.instantPowerPerSec = 0
    Stats.powerPerSecond = 0
    Stats.powerPerHour = 0
    -- Force an immediate UI update to show the reset values
    if updateStats then
        updateStats()
    end
end

-- Enhanced Stats Update with Real-time Tracking
updateStats = function()
    if not player.Character then return end

    local currentTime = tick()
    local deltaTime = currentTime - Stats.lastUpdateTime
    Stats.lastUpdateTime = currentTime
    local sessionTime = currentTime - Stats.sessionStartTime

    -- Get stats with multiple fallback options
    local currentPower = 0
    local currentKills = 0

    -- Check leaderstats
    local leaderstats = player:FindFirstChild("leaderstats")
    if leaderstats then
        -- Power stat search (expanded list)
        local powerStatNames = { "Power", "power", "POWER", "Strength", "strength", "STRENGTH", "Energy", "energy", "ENERGY", "Points", "points", "POINTS", "Coins", "coins", "COINS", "Cash", "cash", "CASH", "Money", "money", "MONEY" }
        for _, statName in ipairs(powerStatNames) do
            local stat = leaderstats:FindFirstChild(statName)
            if stat then
                currentPower = tonumber(stat.Value) or 0
                break
            end
        end
        -- Kills stat search (expanded list)
        local killStatNames = { "Kills", "kills", "KILLS", "KOs", "kos", "KOS", "Eliminations", "eliminations", "ELIMINATIONS", "Eliminated", "eliminated", "ELIMINATED", "Knockouts", "knockouts", "KNOCKOUTS" }
        for _, statName in ipairs(killStatNames) do
            local stat = leaderstats:FindFirstChild(statName)
            if stat then
                currentKills = tonumber(stat.Value) or 0
                break
            end
        end
    end

    -- Also check other common stat locations
    local statFolders = {"Data", "PlayerData", "Stats", "PlayerStats", "Values"}
    for _, folderName in ipairs(statFolders) do
        local folder = player:FindFirstChild(folderName)
        if folder and currentPower == 0 then
            for _, child in pairs(folder:GetChildren()) do
                if child.Name:lower():find("power") or child.Name:lower():find("strength") or child.Name:lower():find("energy") or child.Name:lower():find("points") then
                    currentPower = tonumber(child.Value) or currentPower
                end
                if child.Name:lower():find("kill") or child.Name:lower():find("ko") or child.Name:lower():find("elim") then
                    currentKills = tonumber(child.Value) or currentKills
                end
            end
        end
    end

    -- Update power tracking
    if currentPower ~= statsCache.lastPower then
        if statsCache.lastPower > 0 then
            local powerGained = currentPower - statsCache.lastPower
            if powerGained > 0 then
                Stats.powerGainedThisSession = Stats.powerGainedThisSession + powerGained
                -- Calculate instant power/sec
                if deltaTime > 0 then
                    statsCache.instantPowerPerSec = powerGained / deltaTime
                end
            end
        end
        statsCache.lastPower = currentPower
        Stats.power = currentPower
    end

    -- Update kills
    if currentKills ~= statsCache.lastKills then
        statsCache.lastKills = currentKills
        Stats.kills = currentKills
    end
    
    -- Only calculate rates if farming is active
    if State.fastFarm or State.slowFarm then
        -- Track power history for smoothed calculations
        table.insert(statsCache.powerHistory, { time = currentTime, power = currentPower })
        -- Keep only last 10 seconds of history
        while #statsCache.powerHistory > 0 and statsCache.powerHistory[1].time < currentTime - 10 do
            table.remove(statsCache.powerHistory, 1)
        end

        -- Calculate smoothed power rates
        if #statsCache.powerHistory >= 2 then
            local oldestEntry = statsCache.powerHistory[1]
            local timeDiff = currentTime - oldestEntry.time
            local powerDiff = currentPower - oldestEntry.power
            if timeDiff > 0 then
                statsCache.smoothedPowerPerSec = powerDiff / timeDiff
            end
        end

        -- Use instant rate for display, smoothed rate for efficiency
        Stats.powerPerSecond = statsCache.instantPowerPerSec > 0 and statsCache.instantPowerPerSec or statsCache.smoothedPowerPerSec
        Stats.powerPerHour = Stats.powerPerSecond * 3600

        -- If session rate is better, use that
        if sessionTime > 5 and Stats.powerGainedThisSession > 0 then
            local sessionRate = Stats.powerGainedThisSession / sessionTime
            if sessionRate > Stats.powerPerSecond then
                Stats.powerPerSecond = sessionRate
                Stats.powerPerHour = sessionRate * 3600
            end
        end
    end
    

    -- Update health with max health
    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        Stats.health = math.floor(humanoid.Health)
        local maxHealth = humanoid.MaxHealth
        -- Update health display with percentage
        local healthPercent = math.floor((Stats.health / maxHealth) * 100)
        statLabels.health.Text = string.format("❤️ Health: %d/%d (%d%%)", Stats.health, math.floor(maxHealth), healthPercent)
        -- Dynamic health color based on percentage
        if healthPercent <= 25 then
            statLabels.health.TextColor3 = Theme.danger
        elseif healthPercent <= 50 then
            statLabels.health.TextColor3 = Theme.warning
        elseif healthPercent <= 75 then
            statLabels.health.TextColor3 = Theme.text
        else
            statLabels.health.TextColor3 = Theme.success
        end
    else
        statLabels.health.Text = "❤️ Health: " .. Stats.health
    end

    -- Calculate efficiency with instant feedback
    local efficiency = "Calculating..."
    local efficiencyColor = Theme.accent
    if Stats.powerPerHour > 0 then
        if Stats.powerPerHour >= 1e6 then
            efficiency = "🔥 INSANE (" .. formatNumber(Stats.powerPerHour) .. "/hr)"
            efficiencyColor = Color3.fromRGB(255, 0, 255) -- Purple for insane
        elseif Stats.powerPerHour >= 5e5 then
            efficiency = "⚡ Excellent (" .. formatNumber(Stats.powerPerHour) .. "/hr)"
            efficiencyColor = Color3.fromRGB(0, 255, 0)
        elseif Stats.powerPerHour >= 1e5 then
            efficiency = "✨ Very Good (" .. formatNumber(Stats.powerPerHour) .. "/hr)"
            efficiencyColor = Color3.fromRGB(100, 255, 100)
        elseif Stats.powerPerHour >= 5e4 then
            efficiency = "👍 Good (" .. formatNumber(Stats.powerPerHour) .. "/hr)"
            efficiencyColor = Theme.success
        elseif Stats.powerPerHour >= 1e4 then
            efficiency = "📊 Average (" .. formatNumber(Stats.powerPerHour) .. "/hr)"
            efficiencyColor = Theme.warning
        elseif Stats.powerPerHour >= 1e3 then
            efficiency = "📉 Below Average (" .. formatNumber(Stats.powerPerHour) .. "/hr)"
            efficiencyColor = Color3.fromRGB(255, 150, 0)
        else
            efficiency = "❌ Low (" .. formatNumber(Stats.powerPerHour) .. "/hr)"
            efficiencyColor = Theme.danger
        end
    elseif sessionTime <= 5 and (State.fastFarm or State.slowFarm) then
        efficiency = "⏳ Warming up..."
        efficiencyColor = Theme.accent
    elseif not (State.fastFarm or State.slowFarm) then
        efficiency = "⛔ Farming OFF"
        efficiencyColor = Theme.danger
    elseif Stats.powerGainedThisSession == 0 then
        efficiency = "❓ No progress detected"
        efficiencyColor = Theme.danger
    end
    

    -- Update UI with smooth transitions
    pcall(function()
        statLabels.power.Text = "⚡ Power: " .. formatNumber(Stats.power)
        statLabels.kills.Text = "💀 Kills: " .. formatNumber(Stats.kills)
        -- Animated power/sec display
        local powerSecText = "⏱️ Power/sec: " .. formatNumber(Stats.powerPerSecond)
        if statsCache.instantPowerPerSec > 0 and (State.fastFarm or State.slowFarm) then
            powerSecText = powerSecText .. " (+" .. formatNumber(statsCache.instantPowerPerSec) .. ")"
        end
        statLabels.powerPerSec.Text = powerSecText
        statLabels.powerPerHour.Text = "🕐 Power/hour: " .. formatNumber(Stats.powerPerHour)
        statLabels.session.Text = "📈 Session: +" .. formatNumber(Stats.powerGainedThisSession)
        statLabels.sessionTime.Text = "⏰ Session Time: " .. formatTime(sessionTime)
        statLabels.efficiency.Text = efficiency
        statLabels.efficiency.TextColor3 = efficiencyColor
        -- Flash effect on power gain
        if statsCache.instantPowerPerSec > 0 and (State.fastFarm or State.slowFarm) then
            local flashTween = TweenService:Create(statLabels.power, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {TextColor3 = Color3.fromRGB(255, 255, 0)} )
            flashTween:Play()
            flashTween.Completed:Connect(function()
                TweenService:Create(statLabels.power, TweenInfo.new(0.2), {TextColor3 = Theme.text} ):Play()
            end)
        end
    end)
    
    -- Reset instant rate after display
    statsCache.instantPowerPerSec = 0
end

-- Set up real-time stat monitoring
local function setupStatMonitoring()
    -- Monitor leaderstats changes
    local leaderstats = player:WaitForChild("leaderstats", 5)
    if leaderstats then
        for _, stat in pairs(leaderstats:GetChildren()) do
            stat.Changed:Connect(function() updateStats() end)
        end
        -- Monitor for new stats being added
        leaderstats.ChildAdded:Connect(function(child)
            child.Changed:Connect(function() updateStats() end)
        end)
    end

    -- Also monitor other common stat locations
    local statFolders = {"Data", "PlayerData", "Stats", "PlayerStats", "Values"}
    for _, folderName in ipairs(statFolders) do
        local folder = player:FindFirstChild(folderName)
        if folder then
            for _, stat in pairs(folder:GetChildren()) do
                if stat:IsA("ValueBase") then
                    stat.Changed:Connect(function() updateStats() end)
                end
            end
            folder.ChildAdded:Connect(function(child)
                if child:IsA("ValueBase") then
                    child.Changed:Connect(function() updateStats() end)
                end
            end)
        end
    end

    -- Monitor character health changes
    if player.Character then
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.HealthChanged:Connect(function() updateStats() end)
        end
    end
end

-- Tool Functions
local function getAllToolHandles()
    local handles = {}
    -- Check character tools
    if player.Character then
        for _, tool in pairs(player.Character:GetChildren()) do
            if tool:IsA("Tool") and tool:FindFirstChild("Handle") then
                table.insert(handles, tool.Handle)
            end
        end
    end
    -- Check backpack tools
    if player:FindFirstChild("Backpack") then
        for _, tool in pairs(player.Backpack:GetChildren()) do
            if tool:IsA("Tool") and tool:FindFirstChild("Handle") then
                table.insert(handles, tool.Handle)
            end
        end
    end
    -- Try to load tools if none found
    if #handles == 0 then
        local loadRemote = workspace:FindFirstChild("load") and workspace.load:FindFirstChild("RemoteEvent")
        if loadRemote then
            pcall(function() loadRemote:FireServer() end)
            wait(0.5)
            return getAllToolHandles() -- Recursive call
        end
    end
    return handles
end

-- Combat Functions
local function enhancedKillPlayer(targetPlayer)
    if not targetPlayer or not targetPlayer.Character then return false end
    local humanoid = targetPlayer.Character:FindFirstChildOfClass("Humanoid")
    if not humanoid or humanoid.Health <= 0 then return false end
    
    local handles = getAllToolHandles()
    if #handles == 0 then
        notification("No damage tools found!")
        return false
    end

    local success = false
    for _, handle in pairs(handles) do
        if handle and handle.Parent then
            local dmgRemote = handle:FindFirstChild("dmg") and handle.dmg:FindFirstChild("RemoteEvent")
            if dmgRemote then
                pcall(function()
                    for i = 1, 10 do
                        dmgRemote:FireServer(humanoid, math.huge)
                        if humanoid.Health <= 0 then
                            success = true
                            break
                        end
                        wait(0.05)
                    end
                end)
                if success then break end
            end
        end
    end
    return success
end

local function enhancedGodPlayer(target)
    local handles = getAllToolHandles()
    if #handles == 0 then
        notification("No damage tools found!")
        return false
    end
    
    local targets = type(target) == "table" and target or {target}
    local success = false
    for _, handle in pairs(handles) do
        if handle and handle.Parent then
            local dmgRemote = handle:FindFirstChild("dmg") and handle.dmg:FindFirstChild("RemoteEvent")
            if dmgRemote then
                for _, p in pairs(targets) do
                    if p and p.Character then
                        local humanoid = p.Character:FindFirstChildOfClass("Humanoid")
                        if humanoid then
                            pcall(function()
                                for i = 1, 15 do
                                    dmgRemote:FireServer(humanoid, -math.huge)
                                    wait(0.03)
                                end
                                success = true
                            end)
                        end
                    end
                end
            end
        end
    end
    return success
end

local function enhancedDamagePlayer(targetPlayer, damagePercent)
    if not targetPlayer or not targetPlayer.Character then return false end
    local humanoid = targetPlayer.Character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return false end

    local handles = getAllToolHandles()
    if #handles == 0 then
        notification("No damage tools found!")
        return false
    end
    
    local damageAmount = (damagePercent / 100) * humanoid.MaxHealth
    local success = false
    for _, handle in pairs(handles) do
        if handle and handle.Parent then
            local dmgRemote = handle:FindFirstChild("dmg") and handle.dmg:FindFirstChild("RemoteEvent")
            if dmgRemote then
                pcall(function()
                    dmgRemote:FireServer(humanoid, damageAmount)
                    success = true
                end)
                if success then break end
            end
        end
    end
    return success
end

local function enhancedFarm(speed)
    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return end
    
    local handles = getAllToolHandles()
    if #handles == 0 then
        notification("No tools found for farming!")
        return
    end
    
    for _, handle in pairs(handles) do
        if handle and handle.Parent then
            local upRemote = handle:FindFirstChild("up") and handle.up:FindFirstChild("RemoteEvent")
            if upRemote then
                pcall(function()
                    for i = 1, speed do
                        upRemote:FireServer()
                        if speed > 5 then wait(0.01) end
                    end
                end)
            end
        end
    end
end

-- Player Finding Function
local function findPlayer(name)
    if not name or name == "" then return nil end
    name = name:lower()

    -- Special cases
    if name == "me" then return player end
    if name == "all" then
        return Players:GetPlayers()
    end
    if name == "others" then
        local others = {}
        for _, p in pairs(Players:GetPlayers()) do
            if p ~= player then
                table.insert(others, p)
            end
        end
        return others
    end
    
    -- Find by exact name first
    for _, p in pairs(Players:GetPlayers()) do
        if p.Name:lower() == name then
            return p
        end
    end
    
    -- Find by partial name
    for _, p in pairs(Players:GetPlayers()) do
        if p.Name:lower():find(name, 1, true) then
            return p
        end
    end
    
    return nil
end

-- Command Bar Functions
local function showCommandBar()
    if State.commandBarVisible then return end
    State.commandBarVisible = true
    commandInput.Text = ""
    commandInput:CaptureFocus()
    TweenService:Create(glowFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quart), { BackgroundTransparency = 0.6 }):Play()
    TweenService:Create(commandBarFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quart), { Position = UDim2.new(0.5, -250, 0, 20) }):Play()
end

local function hideCommandBar()
    if not State.commandBarVisible then return end
    State.commandBarVisible = false
    commandInput:ReleaseFocus()
    TweenService:Create(glowFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quart), { BackgroundTransparency = 0.8 }):Play()
    TweenService:Create(commandBarFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quart), { Position = UDim2.new(0.5, -250, 0, -60) }):Play()
end

-- Command List
local commandList = {
    {"tp/to", "Teleport to a player"},
    {"bring [player/all/others]", "Bring players to you"},
    {"kill [player/all/others]", "Kill players"},
    {"loopkill [player/all/me/off]", "Repeatedly kill players"},
    {"dmg [player] [percent]", "Damage player by percentage"},
    {"god [player/all/others/me]", "Give god mode"},
    {"fly", "Toggle fly mode"},
    {"unfly", "Disable fly mode"},
    {"noclip", "Toggle noclip"},
    {"speed/ws [number]", "Set walk speed"},
    {"jp [number]", "Set jump power"},
    {"flyspeed [number]", "Set fly speed"},
    {"admin [player]", "Give admin to player"},
    {"unadmin [player]", "Remove admin from player"},
    {"admins", "List all admins"},
    {"rejoin/rj", "Rejoin the game"},
    {"serverhop", "Join a different server"},
    {"reset", "Reset character"},
    {"esp", "Toggle ESP"},
    {"infjump", "Toggle infinite jump"},
    {"antilag", "Toggle anti-lag mode"},
    {"cmds/help", "Show all commands"}
}

-- Execute Command Function with Duplicate Prevention
local commandCooldowns = {}
local function executeCommand(command, commandPlayer)
    if not command or command == "" then return end

    local cmdPlayer = commandPlayer or player

    if command:sub(1, 1) == Config.commandPrefix then
        command = command:sub(2)
    end

    -- Prevent duplicate execution
    local commandKey = cmdPlayer.Name .. ":" .. command
    local currentTime = tick()
    if commandCooldowns[commandKey] and currentTime - commandCooldowns[commandKey] < 0.5 then
        return -- Ignore duplicate within 0.5 seconds
    end
    commandCooldowns[commandKey] = currentTime
    
    local args = {}
    for arg in command:gmatch("%S+") do
        table.insert(args, arg)
    end
    if #args == 0 then return end
    
    local cmd = args[1]:lower()
    local isAuthorized = (cmdPlayer == player) or table.find(Data.adminPlayers, cmdPlayer.Name)

    -- Teleport Command
    if cmd == "tp" or cmd == "to" then
        if args[2] then
            local target = findPlayer(args[2])
            if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
                if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    player.Character.HumanoidRootPart.CFrame = target.Character.HumanoidRootPart.CFrame
                    notification("Teleported to " .. target.Name)
                end
            else
                notification("Player not found or invalid!")
            end
        else
            notification("Usage: tp [player]")
        end
    
    -- Bring Command
    elseif cmd == "bring" and isAuthorized then
        if args[2] then
            local target = findPlayer(args[2])
            if target and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                if type(target) == "table" then
                    local count = 0
                    for _, p in pairs(target) do
                        if p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
                            p.Character.HumanoidRootPart.CFrame = player.Character.HumanoidRootPart.CFrame
                            count = count + 1
                        end
                    end
                    notification("Brought " .. count .. " players")
                else
                    if target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
                        target.Character.HumanoidRootPart.CFrame = player.Character.HumanoidRootPart.CFrame
                        notification("Brought " .. target.Name)
                    end
                end
            else
                notification("Invalid target!")
            end
        else
            notification("Usage: bring [player/all/others]")
        end

    -- Kill Command
    elseif cmd == "kill" and isAuthorized then
        if args[2] then
            local target = findPlayer(args[2])
            if target then
                if type(target) == "table" then
                    local count = 0
                    for _, p in pairs(target) do
                        if p ~= player and enhancedKillPlayer(p) then
                            count = count + 1
                        end
                    end
                    notification("Killed " .. count .. " players")
                else
                    if target ~= player then
                        if enhancedKillPlayer(target) then
                            notification("Killed " .. target.Name)
                        else
                            notification("Failed to kill " .. target.Name)
                        end
                    else
                        notification("Cannot kill yourself!")
                    end
                end
            else
                notification("Player not found!")
            end
        else
            notification("Usage: kill [player/all/others]")
        end
    
    -- Loop Kill Command (NEW)
    elseif cmd == "loopkill" and isAuthorized then
        if args[2] then
            local targetName = args[2]:lower()
            if targetName == "off" then
                State.loopKill = false
                State.loopKillTargets = {}
                notification("Loop Kill disabled.")
            else
                local targets = findPlayer(targetName)
                if targets then
                    State.loopKillTargets = {} -- Reset targets each time
                    if type(targets) == "table" then
                        for _, p in pairs(targets) do
                            if targetName == "all" and p == player then -- Exclude self from 'all'
                               --
                            else
                                table.insert(State.loopKillTargets, p)
                            end
                        end
                    else
                        table.insert(State.loopKillTargets, targets)
                    end

                    if #State.loopKillTargets > 0 then
                        State.loopKill = true
                        notification("Loop Kill enabled on " .. targetName)
                    else
                        notification("No valid targets found for Loop Kill.")
                    end
                else
                    notification("Player not found for Loop Kill!")
                end
            end
        else
            notification("Usage: ;loopkill [player/all/me/off]")
        end

    -- Damage Command
    elseif (cmd == "dmg" or cmd == "damage") and isAuthorized then
        if args[2] and args[3] then
            local target = findPlayer(args[2])
            local damageStr = args[3]:gsub("%%", "")
            local damagePercent = tonumber(damageStr)
            if target and damagePercent then
                if damagePercent < 1 or damagePercent > 100 then
                    notification("Damage must be between 1% and 100%!")
                    return
                end
                if type(target) == "table" then
                    local count = 0
                    for _, p in pairs(target) do
                        if p ~= player and enhancedDamagePlayer(p, damagePercent) then
                            count = count + 1
                        end
                    end
                    notification("Damaged " .. count .. " players by " .. damagePercent .. "%")
                else
                    if target ~= player then
                        if enhancedDamagePlayer(target, damagePercent) then
                            notification("Damaged " .. target.Name .. " by " .. damagePercent .. "%")
                        else
                            notification("Failed to damage " .. target.Name)
                        end
                    else
                        notification("Cannot damage yourself!")
                    end
                end
            else
                notification(target and "Invalid damage percentage!" or "Player not found!")
            end
        else
            notification("Usage: dmg [player] [percent]")
        end

    -- God Mode Command
    elseif cmd == "god" and isAuthorized then
        local target = findPlayer(args[2] or "me")
        if target then
            if enhancedGodPlayer(target) then
                local name = type(target) == "table" and (#target .. " players") or target.Name
                notification("God mode applied to " .. name)
            else
                notification("Failed to apply god mode!")
            end
        else
            notification("Player not found!")
        end

    -- Fly Command
    elseif cmd == "fly" then
        if not State.flying then
            State.flying = true
            local char = player.Character
            if char and char:FindFirstChild("HumanoidRootPart") then
                local humanoid = char:FindFirstChildOfClass("Humanoid")
                if humanoid then humanoid.PlatformStand = true end
                
                local bv = Instance.new("BodyVelocity")
                bv.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                bv.Velocity = Vector3.new(0, 0, 0)
                bv.Parent = char.HumanoidRootPart
                
                local bg = Instance.new("BodyGyro")
                bg.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
                bg.D = 500
                bg.P = 50000
                bg.Parent = char.HumanoidRootPart
                
                Data.flyObjects = {bv, bg}
                
                Data.flyConnection = RunService.Heartbeat:Connect(function()
                    if State.flying and Data.flyObjects[1] and Data.flyObjects[2] then
                        local bv = Data.flyObjects[1]
                        local bg = Data.flyObjects[2]
                        if bv.Parent and bg.Parent then
                            local camera = workspace.CurrentCamera
                            local moveVector = Vector3.new(0, 0, 0)
                            if UIS:IsKeyDown(Enum.KeyCode.W) then moveVector = moveVector + camera.CFrame.LookVector end
                            if UIS:IsKeyDown(Enum.KeyCode.S) then moveVector = moveVector - camera.CFrame.LookVector end
                            if UIS:IsKeyDown(Enum.KeyCode.A) then moveVector = moveVector - camera.CFrame.RightVector end
                            if UIS:IsKeyDown(Enum.KeyCode.D) then moveVector = moveVector + camera.CFrame.RightVector end
                            if UIS:IsKeyDown(Enum.KeyCode.Space) then moveVector = moveVector + Vector3.new(0, 1, 0) end
                            if UIS:IsKeyDown(Enum.KeyCode.LeftShift) then moveVector = moveVector - Vector3.new(0, 1, 0) end
                            bv.Velocity = moveVector * Config.flySpeed
                            bg.CFrame = camera.CFrame
                        end
                    end
                end)
            end
            notification("Fly enabled")
        else
            notification("Fly is already enabled!")
        end

    -- Unfly Command
    elseif cmd == "unfly" then
        if State.flying then
            State.flying = false
            local char = player.Character
            if char then
                local humanoid = char:FindFirstChildOfClass("Humanoid")
                if humanoid then humanoid.PlatformStand = false end
            end
            for _, obj in pairs(Data.flyObjects) do
                if obj then obj:Destroy() end
            end
            Data.flyObjects = {}
            if Data.flyConnection then
                Data.flyConnection:Disconnect()
                Data.flyConnection = nil
            end
            notification("Fly disabled")
        else
            notification("Fly is not enabled!")
        end

    -- Noclip Command
    elseif cmd == "noclip" then
        State.noclip = not State.noclip
        if State.noclip then
            Data.noclipConnection = RunService.Stepped:Connect(function()
                if player.Character then
                    for _, part in pairs(player.Character:GetDescendants()) do
                        if part:IsA("BasePart") and part.CanCollide then
                            part.CanCollide = false
                        end
                    end
                end
            end)
        else
            if Data.noclipConnection then
                Data.noclipConnection:Disconnect()
                Data.noclipConnection = nil
            end
        end
        notification("Noclip " .. (State.noclip and "ON" or "OFF"))

    -- Speed Command
    elseif cmd == "speed" or cmd == "ws" then
        local speed = tonumber(args[2]) or 16
        if player.Character then
            local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = speed
                Config.walkSpeed = speed
                notification("Speed set to " .. speed)
            end
        end

    -- Jump Power Command
    elseif cmd == "jp" or cmd == "jumppower" then
        local power = tonumber(args[2]) or 50
        if player.Character then
            local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.JumpPower = power
                Config.jumpPower = power
                notification("Jump power set to " .. power)
            end
        end

    -- Fly Speed Command
    elseif cmd == "flyspeed" then
        local speed = tonumber(args[2]) or 50
        Config.flySpeed = math.clamp(speed, 1, 500)
        notification("Fly speed set to " .. Config.flySpeed)
        
    -- Admin Command
    elseif cmd == "admin" and cmdPlayer == player then
        if args[2] then
            local target = findPlayer(args[2])
            if target then
                if not table.find(Data.adminPlayers, target.Name) then
                    table.insert(Data.adminPlayers, target.Name)
                    notification("Added " .. target.Name .. " as admin")
                else
                    notification(target.Name .. " is already admin!")
                end
            else
                notification("Player not found!")
            end
        else
            notification("Usage: admin [player]")
        end
        
    -- Unadmin Command
    elseif cmd == "unadmin" and cmdPlayer == player then
        if args[2] then
            local target = findPlayer(args[2])
            if target then
                local index = table.find(Data.adminPlayers, target.Name)
                if index then
                    table.remove(Data.adminPlayers, index)
                    notification("Removed " .. target.Name .. " from admins")
                else
                    notification(target.Name .. " is not an admin!")
                end
            else
                notification("Player not found!")
            end
        else
            notification("Usage: unadmin [player]")
        end
    
    -- List Admins Command
    elseif cmd == "admins" then
        if #Data.adminPlayers > 0 then
            notification("Admins: " .. table.concat(Data.adminPlayers, ", "))
        else
            notification("No admins set")
        end

    -- Rejoin Command
    elseif cmd == "rejoin" or cmd == "rj" then
        notification("Rejoining...")
        wait(1)
        TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, player)

    -- Server Hop Command
    elseif cmd == "serverhop" or cmd == "hop" then
        notification("Finding new server...")
        local function getServers()
            local servers = {}
            local success, result = pcall(function()
                return HttpService:JSONDecode(game:HttpGet(
                    "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Desc&limit=100"
                ))
            end)
            if success and result and result.data then
                for _, server in pairs(result.data) do
                    if server.id ~= game.JobId and server.playing < server.maxPlayers then
                        table.insert(servers, server.id)
                    end
                end
            end
            return servers
        end
        local servers = getServers()
        if #servers > 0 then
            TeleportService:TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)])
        else
            notification("No available servers found!")
        end

    -- Reset Command
    elseif cmd == "reset" then
        if player.Character then
            local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.Health = 0
                notification("Character reset")
            end
        end

    -- ESP Command
    elseif cmd == "esp" then
        State.esp = not State.esp
        if State.esp then
            -- Enable ESP
            for _, p in pairs(Players:GetPlayers()) do
                if p ~= player and p.Character then
                    local highlight = Instance.new("Highlight")
                    highlight.Name = "ESPHighlight"
                    highlight.FillColor = p.TeamColor.Color
                    highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
                    highlight.FillTransparency = 0.5
                    highlight.Parent = p.Character
                    Data.espObjects[p.Name] = highlight
                end
            end
            notification("ESP enabled")
        else
            -- Disable ESP
            for _, highlight in pairs(Data.espObjects) do
                if highlight and highlight.Parent then highlight:Destroy() end
            end
            Data.espObjects = {}
            notification("ESP disabled")
        end

    -- Infinite Jump Command
    elseif cmd == "infjump" then
        State.infiniteJump = not State.infiniteJump
        notification("Infinite jump " .. (State.infiniteJump and "ON" or "OFF"))

    -- Anti-Lag Command
    elseif cmd == "antilag" then
        Config.antiLagEnabled = not Config.antiLagEnabled
        if Config.antiLagEnabled then
            settings().Rendering.QualityLevel = Enum.QualityLevel.Level01
            for _, obj in pairs(workspace:GetDescendants()) do
                if obj:IsA("ParticleEmitter") or obj:IsA("Trail") then
                    obj.Enabled = false
                elseif obj:IsA("Explosion") then
                    obj.BlastRadius = 1
                    obj.BlastPressure = 1
                end
            end
            notification("Anti-lag enabled")
        else
            settings().Rendering.QualityLevel = Enum.QualityLevel.Automatic
            notification("Anti-lag disabled")
        end

    -- Commands List
    elseif cmd == "cmds" or cmd == "help" then
        notification("Opening command list...")
        wait(0.5)
        -- Create command list window
        local cmdFrame = Instance.new("Frame")
        cmdFrame.Name = "CommandListFrame"
        cmdFrame.Size = UDim2.new(0, 450, 0, 550)
        cmdFrame.Position = UDim2.new(0.5, -225, 0.5, -275)
        cmdFrame.BackgroundColor3 = Theme.background
        cmdFrame.BorderSizePixel = 0
        cmdFrame.Active = true
        cmdFrame.Parent = screenGui
        
        local cmdCorner = Instance.new("UICorner")
        cmdCorner.CornerRadius = UDim.new(0, 12)
        cmdCorner.Parent = cmdFrame
        
        local cmdStroke = Instance.new("UIStroke")
        cmdStroke.Thickness = 2
        cmdStroke.Color = Theme.accent
        cmdStroke.Parent = cmdFrame

        -- Header
        local cmdHeader = Instance.new("Frame")
        cmdHeader.Size = UDim2.new(1, 0, 0, 45)
        cmdHeader.BackgroundColor3 = Theme.secondary
        cmdHeader.BorderSizePixel = 0
        cmdHeader.Parent = cmdFrame
        makeDraggable(cmdFrame, cmdHeader)

        local cmdHeaderCorner = Instance.new("UICorner")
        cmdHeaderCorner.CornerRadius = UDim.new(0, 12)
        cmdHeaderCorner.Parent = cmdHeader
        
        local cmdTitle = Instance.new("TextLabel")
        cmdTitle.Size = UDim2.new(1, -85, 1, 0)
        cmdTitle.Position = UDim2.new(0, 45, 0, 0)
        cmdTitle.BackgroundTransparency = 1
        cmdTitle.Text = "Command List - 2take1 Hub"
        cmdTitle.TextColor3 = Theme.text
        cmdTitle.TextSize = 16
        cmdTitle.Font = Enum.Font.SourceSansBold
        cmdTitle.TextXAlignment = Enum.TextXAlignment.Left
        cmdTitle.Parent = cmdHeader
        
        local cmdClose = Instance.new("TextButton")
        cmdClose.Size = UDim2.new(0, 35, 0, 35)
        cmdClose.Position = UDim2.new(1, -40, 0, 5)
        cmdClose.BackgroundColor3 = Theme.danger
        cmdClose.Text = "X"
        cmdClose.TextColor3 = Theme.text
        cmdClose.TextSize = 16
        cmdClose.Font = Enum.Font.SourceSansBold
        cmdClose.Parent = cmdHeader
        
        local cmdCloseCorner = Instance.new("UICorner")
        cmdCloseCorner.CornerRadius = UDim.new(0, 8)
        cmdCloseCorner.Parent = cmdClose

        -- Command list scroll
        local cmdScroll = Instance.new("ScrollingFrame")
        cmdScroll.Size = UDim2.new(1, -20, 1, -65)
        cmdScroll.Position = UDim2.new(0, 10, 0, 55)
        cmdScroll.BackgroundColor3 = Theme.secondary
        cmdScroll.BorderSizePixel = 0
        cmdScroll.ScrollBarThickness = 8
        cmdScroll.ScrollBarImageColor3 = Theme.accent
        cmdScroll.CanvasSize = UDim2.new(0, 0, 0, #commandList * 55 + 20)
        cmdScroll.Parent = cmdFrame
        
        local cmdScrollCorner = Instance.new("UICorner")
        cmdScrollCorner.CornerRadius = UDim.new(0, 8)
        cmdScrollCorner.Parent = cmdScroll

        -- Add commands
        for i, cmdData in ipairs(commandList) do
            local cmdItem = Instance.new("Frame")
            cmdItem.Size = UDim2.new(1, -15, 0, 45)
            cmdItem.Position = UDim2.new(0, 7, 0, (i-1) * 55 + 10)
            cmdItem.BackgroundColor3 = Theme.tertiary
            cmdItem.BorderSizePixel = 0
            cmdItem.Parent = cmdScroll
            
            local cmdItemCorner = Instance.new("UICorner")
            cmdItemCorner.CornerRadius = UDim.new(0, 8)
            cmdItemCorner.Parent = cmdItem
            
            local cmdName = Instance.new("TextLabel")
            cmdName.Size = UDim2.new(0.45, -15, 1, 0)
            cmdName.Position = UDim2.new(0, 15, 0, 0)
            cmdName.BackgroundTransparency = 1
            cmdName.Text = Config.commandPrefix .. cmdData[1]
            cmdName.TextColor3 = Theme.accent
            cmdName.TextSize = 14
            cmdName.Font = Enum.Font.SourceSansBold
            cmdName.TextXAlignment = Enum.TextXAlignment.Left
            cmdName.Parent = cmdItem
            
            local cmdDesc = Instance.new("TextLabel")
            cmdDesc.Size = UDim2.new(0.55, -15, 1, 0)
            cmdDesc.Position = UDim2.new(0.45, 0, 0, 0)
            cmdDesc.BackgroundTransparency = 1
            cmdDesc.Text = cmdData[2]
            cmdDesc.TextColor3 = Theme.text
            cmdDesc.TextSize = 12
            cmdDesc.Font = Enum.Font.SourceSans
            cmdDesc.TextXAlignment = Enum.TextXAlignment.Left
            cmdDesc.TextWrapped = true
            cmdDesc.Parent = cmdItem
        end

        cmdClose.MouseButton1Click:Connect(function()
            playSound("click")
            cmdFrame:Destroy()
        end)
        
    else
        if not isAuthorized and (cmd == "kill" or cmd == "god" or cmd == "bring" or cmd == "dmg" or cmd == "damage" or cmd == "loopkill") then
            notification("Access denied! You need admin privileges.")
        else
            notification("Unknown command: " .. cmd)
        end
    end
    hideCommandBar()
end

-- UI Creation Functions
local function createToggle(text, callback)
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, -10, 0, 40)
    frame.BackgroundColor3 = Theme.tertiary
    frame.BorderSizePixel = 0
    frame.Parent = content

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = frame
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -60, 1, 0)
    label.Position = UDim2.new(0, 10, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = Theme.text
    label.TextSize = 14
    label.Font = Enum.Font.SourceSans
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = frame
    
    local toggle = Instance.new("TextButton")
    toggle.Size = UDim2.new(0, 40, 0, 20)
    toggle.Position = UDim2.new(1, -50, 0.5, -10)
    toggle.BackgroundColor3 = Theme.danger
    toggle.Text = "OFF"
    toggle.TextColor3 = Theme.text
    toggle.TextSize = 12
    toggle.Font = Enum.Font.SourceSansBold
    toggle.Parent = frame
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 4)
    toggleCorner.Parent = toggle
    
    local enabled = false
    toggle.MouseButton1Click:Connect(function()
        enabled = not enabled
        toggle.BackgroundColor3 = enabled and Theme.success or Theme.danger
        toggle.Text = enabled and "ON" or "OFF"
        playSound("toggle")
        callback(enabled)
    end)
    toggle.MouseEnter:Connect(function() playSound("hover") end)
    
    return frame, toggle
end

local function createToggleWithSpeed(text, callback)
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, -10, 0, 70)
    frame.BackgroundColor3 = Theme.tertiary
    frame.BorderSizePixel = 0
    frame.Parent = content

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = frame

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -60, 0, 40)
    label.Position = UDim2.new(0, 10, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = Theme.text
    label.TextSize = 14
    label.Font = Enum.Font.SourceSans
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = frame

    local toggle = Instance.new("TextButton")
    toggle.Size = UDim2.new(0, 40, 0, 20)
    toggle.Position = UDim2.new(1, -50, 0, 10)
    toggle.BackgroundColor3 = Theme.danger
    toggle.Text = "OFF"
    toggle.TextColor3 = Theme.text
    toggle.TextSize = 12
    toggle.Font = Enum.Font.SourceSansBold
    toggle.Parent = frame

    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 4)
    toggleCorner.Parent = toggle

    local speedLabel = Instance.new("TextLabel")
    speedLabel.Size = UDim2.new(0, 60, 0, 25)
    speedLabel.Position = UDim2.new(0, 10, 0, 40)
    speedLabel.BackgroundTransparency = 1
    speedLabel.Text = "Speed:"
    speedLabel.TextColor3 = Theme.text
    speedLabel.TextSize = 12
    speedLabel.Font = Enum.Font.SourceSans
    speedLabel.TextXAlignment = Enum.TextXAlignment.Left
    speedLabel.Parent = frame

    local speedInput = Instance.new("TextBox")
    speedInput.Size = UDim2.new(0, 60, 0, 25)
    speedInput.Position = UDim2.new(0, 70, 0, 40)
    speedInput.BackgroundColor3 = Theme.secondary
    speedInput.BorderSizePixel = 0
    speedInput.Text = tostring(Config.speed)
    speedInput.TextColor3 = Theme.text
    speedInput.TextSize = 12
    speedInput.Font = Enum.Font.SourceSans
    speedInput.Parent = frame

    local inputCorner = Instance.new("UICorner")
    inputCorner.CornerRadius = UDim.new(0, 4)
    inputCorner.Parent = speedInput

    local speedDisplay = Instance.new("TextLabel")
    speedDisplay.Size = UDim2.new(1, -140, 0, 25)
    speedDisplay.Position = UDim2.new(0, 135, 0, 40)
    speedDisplay.BackgroundTransparency = 1
    speedDisplay.Text = "≈ " .. formatNumber(Config.speed * 3600) .. " power/hour"
    speedDisplay.TextColor3 = Theme.accent
    speedDisplay.TextSize = 11
    speedDisplay.Font = Enum.Font.SourceSans
    speedDisplay.TextXAlignment = Enum.TextXAlignment.Left
    speedDisplay.Parent = frame

    speedInput.FocusLost:Connect(function()
        local newSpeed = tonumber(speedInput.Text)
        if newSpeed and newSpeed > 0 and newSpeed <= 1000 then
            Config.speed = math.floor(newSpeed)
            speedInput.Text = tostring(Config.speed)
            notification("Speed set to " .. Config.speed)
            speedDisplay.Text = "≈ " .. formatNumber(Config.speed * 3600) .. " power/hour"
        else
            speedInput.Text = tostring(Config.speed)
            notification("Invalid speed! Use 1-1000")
        end
    end)

    local enabled = false
    toggle.MouseButton1Click:Connect(function()
        enabled = not enabled
        toggle.BackgroundColor3 = enabled and Theme.success or Theme.danger
        toggle.Text = enabled and "ON" or "OFF"
        playSound("toggle")
        callback(enabled)
    end)
    toggle.MouseEnter:Connect(function() playSound("hover") end)

    return frame, toggle
end

local function createButton(text, callback)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, -10, 0, 40)
    button.BackgroundColor3 = Theme.accent
    button.Text = text
    button.TextColor3 = Theme.text
    button.TextSize = 14
    button.Font = Enum.Font.SourceSansBold
    button.BorderSizePixel = 0
    button.Parent = content

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = button

    button.MouseButton1Click:Connect(function()
        playSound("click")
        callback()
    end)
    button.MouseEnter:Connect(function()
        playSound("hover")
        TweenService:Create(button, TweenInfo.new(0.2), { BackgroundColor3 = Theme.accent:Lerp(Color3.new(1,1,1), 0.2) }):Play()
    end)
    button.MouseLeave:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), { BackgroundColor3 = Theme.accent }):Play()
    end)

    return button
end

-- Create UI Elements with Stat Reset Logic
createToggleWithSpeed("Fast Farm", function(enabled)
    State.fastFarm = enabled
    notification("Fast Farm " .. (enabled and "ON" or "OFF"))
    if not enabled then
        resetFarmingStats() -- Reset stats when turning off
    end
end)
createToggle("Slow Farm", function(enabled)
    State.slowFarm = enabled
    notification("Slow Farm " .. (enabled and "ON" or "OFF"))
    if not enabled then
        resetFarmingStats() -- Reset stats when turning off
    end
end)
createToggle("Godmode", function(enabled)
    State.godMode = enabled
    notification("Godmode " .. (enabled and "ON" or "OFF"))
    if enabled then
        spawn(function()
            while State.godMode do
                enhancedGodPlayer(player)
                wait(0.1)
            end
        end)
    end
end)
createToggle("Kill Aura", function(enabled)
    State.killAura = enabled
    notification("Kill Aura " .. (enabled and "ON" or "OFF"))
end)
createButton("Kill All", function()
    notification("Attacking all players...")
    spawn(function()
        local count = 0
        for _, p in pairs(Players:GetPlayers()) do
            if p ~= player and enhancedKillPlayer(p) then
                count = count + 1
                wait(0.1)
            end
        end
        notification("Attacked " .. count .. " players")
    end)
end)
createButton("God All", function()
    local players = {}
    for _, p in pairs(Players:GetPlayers()) do
        if p ~= player then
            table.insert(players, p)
        end
    end
    local success = enhancedGodPlayer(players)
    notification(success and "God applied to all players" or "No tools found!")
end)
createButton("Reset Stats", function()
    Stats.powerGainedThisSession = 0
    Stats.sessionStartTime = tick()
    Stats.lastPowerCheck = Stats.power
    notification("Stats reset!")
end)
createButton("Show Commands", function()
    executeCommand("cmds")
end)

-- Event Connections with Single Execution
local commandExecuting = false
executeButton.MouseButton1Click:Connect(function()
    if not commandExecuting then
        commandExecuting = true
        executeCommand(commandInput.Text)
        wait(0.1)
        commandExecuting = false
    end
end)
commandInput.FocusLost:Connect(function(enterPressed)
    if enterPressed and not commandExecuting then
        commandExecuting = true
        executeCommand(commandInput.Text)
        wait(0.1)
        commandExecuting = false
    else
        hideCommandBar()
    end
end)

-- Keyboard Input Handler with Debounce
local semicolonDebounce = false
UIS.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.Semicolon then
        if not semicolonDebounce then
            semicolonDebounce = true
            showCommandBar()
            spawn(function() wait(0.5) semicolonDebounce = false end)
        end
    elseif input.KeyCode == Enum.KeyCode.Escape and State.commandBarVisible then
        hideCommandBar()
    elseif input.KeyCode == Enum.KeyCode.Space and State.infiniteJump then
        if player.Character then
            local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end
    end
end)

-- Close Button Handler
closeButton.MouseButton1Click:Connect(function()
    playSound("click")
    -- Cleanup connections
    for _, connection in pairs(Data.connections) do
        if connection then connection:Disconnect() end
    end
    if Data.flyConnection then Data.flyConnection:Disconnect() end
    if Data.noclipConnection then Data.noclipConnection:Disconnect() end
    if Data.chatConnection then Data.chatConnection:Disconnect() end
    -- Cleanup ESP
    for _, highlight in pairs(Data.espObjects) do
        if highlight and highlight.Parent then highlight:Destroy() end
    end
    -- Cleanup fly objects
    for _, obj in pairs(Data.flyObjects) do
        if obj then obj:Destroy() end
    end
    screenGui:Destroy()
end)
closeButton.MouseEnter:Connect(function()
    playSound("hover")
    TweenService:Create(closeButton, TweenInfo.new(0.2), { BackgroundColor3 = Theme.danger:Lerp(Color3.new(1,1,1), 0.2) }):Play()
end)
closeButton.MouseLeave:Connect(function()
    TweenService:Create(closeButton, TweenInfo.new(0.2), { BackgroundColor3 = Theme.danger }):Play()
end)

-- Text Chat Service Setup with Duplicate Prevention
local processedMessages = {}
local function setupTextChatCommands()
    if TextChatService and TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        pcall(function()
            local textChannels = TextChatService:WaitForChild("TextChannels", 5)
            if textChannels then
                local generalChannel = textChannels:WaitForChild("RBXGeneral", 5)
                if generalChannel then
                    generalChannel.OnIncomingMessage = function(message)
                        if message.TextSource then
                            local messageId = message.TextSource.UserId .. ":" .. message.Text .. ":" .. tostring(message.Timestamp or tick())
                            -- Check if we've already processed this message
                            if processedMessages[messageId] then return end
                            processedMessages[messageId] = true
                            -- Clean old messages after 5 seconds
                            spawn(function() wait(5) processedMessages[messageId] = nil end)
                            
                            local messagePlayer = Players:GetPlayerByUserId(message.TextSource.UserId)
                            if messagePlayer then
                                local text = message.Text
                                if text and text:sub(1, 1) == Config.commandPrefix then
                                    if messagePlayer == player or table.find(Data.adminPlayers, messagePlayer.Name) then
                                        executeCommand(text, messagePlayer)
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end)
    else
        -- Legacy chat with duplicate prevention
        local chatConnections = {}
        local function connectPlayerChat(plr)
            if chatConnections[plr] then return end -- Already connected
            chatConnections[plr] = plr.Chatted:Connect(function(msg)
                if msg:sub(1, 1) == Config.commandPrefix then
                    if plr == player or table.find(Data.adminPlayers, plr.Name) then
                        executeCommand(msg, plr)
                    end
                end
            end)
        end
        -- Connect existing players
        for _, plr in pairs(Players:GetPlayers()) do
            connectPlayerChat(plr)
        end
        -- Connect new players
        Players.PlayerAdded:Connect(connectPlayerChat)
        -- Clean up on player removal
        Players.PlayerRemoving:Connect(function(plr)
            if chatConnections[plr] then
                chatConnections[plr]:Disconnect()
                chatConnections[plr] = nil
            end
        end)
    end
end

-- Main Loop with Instant Updates
local mainLoop = RunService.Heartbeat:Connect(function()
    -- Update stats every frame for instant feedback
    updateStats()

    if not player.Character then return end
    local char = player.Character
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    local rootPart = char:FindFirstChild("HumanoidRootPart")
    if not humanoid or not rootPart then return end
    
    -- Fast Farm
    if State.fastFarm then
        enhancedFarm(Config.speed)
    end
    -- Slow Farm
    if State.slowFarm then
        enhancedFarm(1)
    end
    
    -- Loop Kill (NEW)
    if State.loopKill and #State.loopKillTargets > 0 then
        local validTargets = {}
        for _, target in ipairs(State.loopKillTargets) do
            if target and target.Parent == Players and target.Character then
                enhancedKillPlayer(target)
                table.insert(validTargets, target) -- Keep target if still valid
            end
        end
        State.loopKillTargets = validTargets -- Update the list
        if #State.loopKillTargets == 0 then
            State.loopKill = false -- Turn off if no targets left
            notification("All Loop Kill targets are gone.")
        end
    end
    
    -- Kill Aura
    if State.killAura then
        local handles = getAllToolHandles()
        for _, handle in pairs(handles) do
            local dmgRemote = handle:FindFirstChild("dmg") and handle.dmg:FindFirstChild("RemoteEvent")
            if dmgRemote then
                for _, v in pairs(workspace:GetChildren()) do
                    if v ~= char and v:FindFirstChildOfClass("Humanoid") and v:FindFirstChild("HumanoidRootPart") then
                        -- Check if it's a protected player
                        local isProtected = false
                        for _, p in pairs(Players:GetPlayers()) do
                            if p.Character == v and (table.find(Data.adminPlayers, p.Name) or p == player) then
                                isProtected = true
                                break
                            end
                        end
                        if not isProtected then
                            local distance = (rootPart.Position - v.HumanoidRootPart.Position).Magnitude
                            if distance <= Config.range then
                                pcall(function() dmgRemote:FireServer(v.Humanoid, math.huge) end)
                            end
                        end
                    end
                end
            end
        end
    end
end)
table.insert(Data.connections, mainLoop)

-- Character Setup with Stat Monitoring
local function onCharacterAdded(char)
    wait(1)
    local humanoid = char:WaitForChild("Humanoid", 5)
    if humanoid then
        humanoid.WalkSpeed = Config.walkSpeed
        humanoid.JumpPower = Config.jumpPower
        -- Monitor health changes
        humanoid.HealthChanged:Connect(function() updateStats() end)
        -- Restore fly if it was enabled
        if State.flying then
            wait(0.5)
            executeCommand("fly")
        end
    end
    -- Re-setup stat monitoring for new character
    setupStatMonitoring()
end
player.CharacterAdded:Connect(onCharacterAdded)

-- ESP Player Handler
local function handlePlayerESP(plr)
    if State.esp and plr ~= player then
        plr.CharacterAdded:Connect(function(char)
            wait(0.5)
            if State.esp then
                local highlight = Instance.new("Highlight")
                highlight.Name = "ESPHighlight"
                highlight.FillColor = plr.TeamColor.Color
                highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
                highlight.FillTransparency = 0.5
                highlight.Parent = char
                Data.espObjects[plr.Name] = highlight
            end
        end)
    end
end
-- Handle new players for ESP
Players.PlayerAdded:Connect(handlePlayerESP)

-- Anti-Lag Workspace Handler
if Config.antiLagEnabled then
    workspace.DescendantAdded:Connect(function(obj)
        if Config.antiLagEnabled then
            if obj:IsA("ParticleEmitter") or obj:IsA("Trail") then
                obj.Enabled = false
            elseif obj:IsA("Explosion") then
                obj.BlastRadius = 1
                obj.BlastPressure = 1
            end
        end
    end)
end

-- Setup initial admin
table.insert(Data.adminPlayers, player.Name)

-- NEW: Auto Admin Whitelist Checker
spawn(function()
    while wait(3) do
        if #Config.whitelistedIds > 0 then
            for _, p in pairs(Players:GetPlayers()) do
                local isWhitelisted = table.find(Config.whitelistedIds, p.UserId)
                local isAdmin = table.find(Data.adminPlayers, p.Name)

                if isWhitelisted and not isAdmin then
                    table.insert(Data.adminPlayers, p.Name)
                    notification("Auto-admined whitelisted user: " .. p.Name, 5)
                end
            end
        end
    end
end)

-- Initial stats setup with monitoring
spawn(function()
    wait(1)
    -- Set up monitoring first
    setupStatMonitoring()
    -- Initial stat check
    local leaderstats = player:FindFirstChild("leaderstats")
    if leaderstats then
        local powerStat
        for _, statName in ipairs({"Power", "power", "Strength", "strength", "Energy", "energy"}) do
            powerStat = leaderstats:FindFirstChild(statName)
            if powerStat then break end
        end
        if powerStat then
            Stats.lastPowerCheck = tonumber(powerStat.Value) or 0
            Stats.power = Stats.lastPowerCheck
            statsCache.lastPower = Stats.power
        end
    end
    -- Force initial update
    updateStats()
end)

-- Setup chat commands
setupTextChatCommands()

-- Startup notifications
notification("2take1 Hub Loaded!", 4)
wait(1)
notification("Type ;cmds to see all commands", 3)

-- Performance monitor
spawn(function()
    while screenGui.Parent do
        wait(60) -- Check every minute
        local memUsage = collectgarbage("count")
        if memUsage > 100000 then -- If using more than 100MB
            collectgarbage()
            if Config.performanceMode then
                notification("Memory cleaned for better performance")
            end
        end
    end
end)
