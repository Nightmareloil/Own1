-- 2take1 Hub - Complete Working Script
-- Fixed and optimized for modern Roblox

repeat wait() until game.Players.LocalPlayer

-- Services
local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")

-- Variables
local player = Players.LocalPlayer
local load = workspace:WaitForChild("load"):WaitForChild("RemoteEvent")

-- Configuration
local Config = {
    speed = 5,
    range = 10,
    walkSpeed = 16,
    jumpPower = 50,
    flySpeed = 50
}

-- State Management
local State = {
    fastFarm = false,
    slowFarm = false,
    godMode = false,
    killAura = false,
    flying = false,
    noclip = false,
    guiOpen = true,
    focused = false
}

-- Data Storage
local Data = {
    admins = {},
    commandHistory = {},
    historyIndex = 0,
    flyObjects = {}
}

-- Theme
local Theme = {
    background = Color3.fromRGB(25, 25, 25),
    secondary = Color3.fromRGB(35, 35, 35),
    tertiary = Color3.fromRGB(45, 45, 45),
    accent = Color3.fromRGB(88, 101, 242),
    text = Color3.fromRGB(255, 255, 255),
    textDim = Color3.fromRGB(180, 180, 180),
    success = Color3.fromRGB(87, 242, 135),
    danger = Color3.fromRGB(237, 66, 69),
    warning = Color3.fromRGB(255, 193, 7)
}

-- UI Variable
local GUI = {}

-- Utility Functions
local function createTween(object, properties, duration)
    return TweenService:Create(object, TweenInfo.new(duration or 0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), properties)
end

local function notification(text, notificationType)
    notificationType = notificationType or "info"
    local colors = {
        info = Theme.accent,
        success = Theme.success,
        error = Theme.danger,
        warning = Theme.warning
    }
    
    -- Create notification
    local notif = Instance.new("Frame")
    notif.Size = UDim2.new(0, 300, 0, 50)
    notif.Position = UDim2.new(1, -320, 0, 20)
    notif.BackgroundColor3 = Theme.secondary
    notif.BorderSizePixel = 0
    
    if GUI.screenGui then
        notif.Parent = GUI.screenGui
    else
        return
    end
    
    -- Corner radius
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = notif
    
    -- Border
    local stroke = Instance.new("UIStroke")
    stroke.Color = colors[notificationType]
    stroke.Thickness = 2
    stroke.Parent = notif
    
    -- Text
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, -20, 1, 0)
    textLabel.Position = UDim2.new(0, 10, 0, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = text
    textLabel.TextColor3 = Theme.text
    textLabel.TextSize = 12
    textLabel.Font = Enum.Font.Gotham
    textLabel.TextWrapped = true
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.Parent = notif
    
    -- Animate in
    createTween(notif, {Position = UDim2.new(1, -320, 0, 20)}):Play()
    
    -- Auto remove
    task.spawn(function()
        wait(3)
        createTween(notif, {Position = UDim2.new(1, 20, 0, 20)}):Play()
        wait(0.5)
        notif:Destroy()
    end)
end

local function findPlayer(name)
    if not name or name == "" then return nil end
    name = name:lower()
    
    print("[2take1 Hub DEBUG] Looking for player: " .. name)
    
    if name == "me" then return player end
    if name == "all" then return Players:GetPlayers() end
    if name == "others" then
        local others = {}
        for _, p in pairs(Players:GetPlayers()) do
            if p ~= player then
                table.insert(others, p)
            end
        end
        return others
    end
    
    -- Find by exact name match first
    for _, p in pairs(Players:GetPlayers()) do
        if p.Name:lower() == name then
            print("[2take1 Hub DEBUG] Found exact match: " .. p.Name)
            return p
        end
    end
    
    -- Find by display name match
    for _, p in pairs(Players:GetPlayers()) do
        if p.DisplayName:lower() == name then
            print("[2take1 Hub DEBUG] Found display name match: " .. p.Name)
            return p
        end
    end
    
    -- Find by partial name match
    for _, p in pairs(Players:GetPlayers()) do
        if p.Name:lower():find(name) then
            print("[2take1 Hub DEBUG] Found partial match: " .. p.Name)
            return p
        end
    end
    
    -- Find by partial display name match
    for _, p in pairs(Players:GetPlayers()) do
        if p.DisplayName:lower():find(name) then
            print("[2take1 Hub DEBUG] Found partial display name match: " .. p.Name)
            return p
        end
    end
    
    print("[2take1 Hub DEBUG] No player found for: " .. name)
    print("[2take1 Hub DEBUG] Available players:")
    for _, p in pairs(Players:GetPlayers()) do
        print("  - " .. p.Name .. " (" .. p.DisplayName .. ")")
    end
    
    return nil
end

local function getSwordHandle()
    -- Check if sword is equipped
    local sword = player.Character and player.Character:FindFirstChildOfClass("Tool")
    if not sword then
        -- Try to get sword from backpack
        sword = player.Backpack:FindFirstChildOfClass("Tool")
        if sword then
            -- Equip the sword
            player.Character.Humanoid:EquipTool(sword)
        else
            -- Request new sword
            load:FireServer()
            wait(0.5)
            sword = player.Backpack:WaitForChild("sword", 5)
            if sword then
                player.Character.Humanoid:EquipTool(sword)
            end
        end
    end
    
    return sword and sword:FindFirstChild("Handle")
end

-- Admin System
local function isAdmin(plr)
    for _, adminName in pairs(Data.admins) do
        if plr.Name:lower() == adminName:lower() then
            return true
        end
    end
    return false
end

local function addAdmin(plr)
    if not isAdmin(plr) then
        table.insert(Data.admins, plr.Name)
        notification("Added " .. plr.Name .. " as admin", "success")
        return true
    end
    return false
end

local function removeAdmin(plr)
    for i, adminName in pairs(Data.admins) do
        if adminName:lower() == plr.Name:lower() then
            table.remove(Data.admins, i)
            notification("Removed " .. plr.Name .. " from admin", "info")
            return true
        end
    end
    return false
end

-- Command System with Enhanced Debugging
local function executeCommand(command, executor)
    -- Add debug logging
    print("[2take1 Hub DEBUG] Command received: '" .. command .. "' from " .. executor.Name)
    
    local args = {}
    for word in command:gmatch("%S+") do
        table.insert(args, word:lower())
    end
    
    if #args == 0 then 
        print("[2take1 Hub DEBUG] No arguments found")
        return 
    end
    
    local cmd = args[1]
    local target = args[2] and findPlayer(args[2])
    
    print("[2take1 Hub DEBUG] Command: " .. cmd .. ", Target: " .. (target and target.Name or "none"))
    
    -- Admin management commands (owner only)
    if cmd == "admin" and executor == player then
        print("[2take1 Hub DEBUG] Admin command detected, target: " .. (args[2] or "none"))
        if target then
            if addAdmin(target) then
                notification("Successfully added " .. target.Name .. " as admin", "success")
                print("[2take1 Hub] Added " .. target.Name .. " as admin")
            else
                notification(target.Name .. " is already an admin", "warning")
            end
        else
            notification("Player '" .. (args[2] or "unknown") .. "' not found", "error")
            print("[2take1 Hub DEBUG] Player not found: " .. (args[2] or "unknown"))
        end
        return
    end
    
    if cmd == "unadmin" and executor == player then
        if target then
            if removeAdmin(target) then
                notification("Successfully removed " .. target.Name .. " from admin", "success")
            else
                notification(target.Name .. " is not an admin", "warning")
            end
        else
            notification("Player '" .. (args[2] or "unknown") .. "' not found", "error")
        end
        return
    end
    
    if cmd == "admins" then
        if #Data.admins == 0 then
            notification("No admins currently", "info")
        else
            notification("Admins (" .. #Data.admins .. "): " .. table.concat(Data.admins, ", "), "info")
        end
        return
    end
    
    if cmd == "test" then
        notification("Test command working for " .. executor.Name, "success")
        print("[2take1 Hub] Test command executed by " .. executor.Name)
        return
    end
    
    -- Check permissions for protected commands
    local protectedCommands = {"kill", "god", "tp", "bring", "dmg", "damage"}
    local isProtected = false
    for _, protectedCmd in pairs(protectedCommands) do
        if cmd == protectedCmd then
            isProtected = true
            break
        end
    end
    
    if isProtected and executor ~= player and not isAdmin(executor) then
        notification(executor.Name .. " tried to use admin command: " .. cmd, "warning")
        print("[2take1 Hub] Unauthorized command attempt by " .. executor.Name)
        return
    end
    
    -- Execute commands
    if cmd == "kill" then
        local handle = getSwordHandle()
        if not handle or not handle:FindFirstChild("dmg") then
            notification("No sword equipped", "error")
            return
        end
        
        task.spawn(function()
            local targets = {}
            
            if args[2] == "all" then
                -- Kill others first, then self
                for _, plr in pairs(Players:GetPlayers()) do
                    if plr ~= executor then
                        table.insert(targets, plr)
                    end
                end
                table.insert(targets, executor)
            elseif args[2] == "others" then
                for _, plr in pairs(Players:GetPlayers()) do
                    if plr ~= executor then
                        table.insert(targets, plr)
                    end
                end
            elseif target then
                targets = {target}
            else
                notification("Usage: kill [player/all/others]", "error")
                return
            end
            
            for _, plr in pairs(targets) do
                if plr.Character and plr.Character:FindFirstChild("Humanoid") then
                    handle.dmg.RemoteEvent:FireServer(plr.Character.Humanoid, math.huge)
                    wait(0.1)
                end
            end
            
            notification("Killed " .. #targets .. " players", "success")
        end)
        
    elseif cmd == "god" then
        local handle = getSwordHandle()
        if not handle or not handle:FindFirstChild("dmg") then
            notification("No sword equipped", "error")
            return
        end
        
        task.spawn(function()
            local targets = {}
            
            if args[2] == "all" then
                targets = Players:GetPlayers()
            elseif args[2] == "others" then
                for _, plr in pairs(Players:GetPlayers()) do
                    if plr ~= executor then
                        table.insert(targets, plr)
                    end
                end
            elseif target then
                targets = {target}
            else
                notification("Usage: god [player/all/others]", "error")
                return
            end
            
            for _, plr in pairs(targets) do
                if plr.Character and plr.Character:FindFirstChild("Humanoid") then
                    for i = 1, 5 do
                        handle.dmg.RemoteEvent:FireServer(plr.Character.Humanoid, -math.huge)
                        wait(0.05)
                    end
                    wait(0.1)
                end
            end
            
            notification("Godded " .. #targets .. " players", "success")
        end)
        
    elseif cmd == "dmg" or cmd == "damage" then
        local handle = getSwordHandle()
        if not handle or not handle:FindFirstChild("dmg") then
            notification("No sword equipped", "error")
            return
        end
        
        task.spawn(function()
            local percentage = tonumber(args[3]) or 50
            percentage = math.clamp(percentage, 1, 99)
            
            local targets = {}
            
            if args[2] == "all" then
                for _, plr in pairs(Players:GetPlayers()) do
                    if plr ~= executor then
                        table.insert(targets, plr)
                    end
                end
            elseif args[2] == "others" then
                for _, plr in pairs(Players:GetPlayers()) do
                    if plr ~= executor then
                        table.insert(targets, plr)
                    end
                end
            elseif target then
                targets = {target}
            else
                notification("Usage: dmg [player/all/others] [percentage]", "error")
                return
            end
            
            -- Get player's power for damage calculation
            local power = 1000 -- Default power
            if player.leaderstats and player.leaderstats:FindFirstChild("Power") then
                power = player.leaderstats.Power.Value
            end
            
            local damageAmount = (power * percentage) / 100
            
            for _, plr in pairs(targets) do
                if plr.Character and plr.Character:FindFirstChild("Humanoid") then
                    handle.dmg.RemoteEvent:FireServer(plr.Character.Humanoid, damageAmount)
                    wait(0.1)
                end
            end
            
            notification("Damaged " .. #targets .. " players (" .. percentage .. "%)", "success")
        end)
        
    elseif cmd == "tp" or cmd == "goto" then
        if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") and 
           player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            player.Character.HumanoidRootPart.CFrame = target.Character.HumanoidRootPart.CFrame
            notification("Teleported to " .. target.Name, "success")
        else
            notification("Cannot teleport to target", "error")
        end
        
    elseif cmd == "bring" then
        if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") and 
           player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            target.Character.HumanoidRootPart.CFrame = player.Character.HumanoidRootPart.CFrame
            notification("Brought " .. target.Name, "success")
        else
            notification("Cannot bring target", "error")
        end
        
    elseif cmd == "fly" then
        if not State.flying then
            State.flying = true
            local character = player.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                local rootPart = character.HumanoidRootPart
                
                local bodyVelocity = Instance.new("BodyVelocity")
                bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                bodyVelocity.Velocity = Vector3.new(0, 0, 0)
                bodyVelocity.Parent = rootPart
                
                local bodyGyro = Instance.new("BodyGyro")
                bodyGyro.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
                bodyGyro.D = 2000
                bodyGyro.P = 10000
                bodyGyro.Parent = rootPart
                
                Data.flyObjects = {bodyVelocity, bodyGyro}
                
                notification("Fly enabled", "success")
                
                task.spawn(function()
                    while State.flying and character.Parent do
                        local camera = workspace.CurrentCamera
                        local moveVector = Vector3.new(0, 0, 0)
                        
                        if UIS:IsKeyDown(Enum.KeyCode.W) then
                            moveVector = moveVector + camera.CFrame.LookVector
                        end
                        if UIS:IsKeyDown(Enum.KeyCode.S) then
                            moveVector = moveVector - camera.CFrame.LookVector
                        end
                        if UIS:IsKeyDown(Enum.KeyCode.A) then
                            moveVector = moveVector - camera.CFrame.RightVector
                        end
                        if UIS:IsKeyDown(Enum.KeyCode.D) then
                            moveVector = moveVector + camera.CFrame.RightVector
                        end
                        if UIS:IsKeyDown(Enum.KeyCode.Space) then
                            moveVector = moveVector + Vector3.new(0, 1, 0)
                        end
                        if UIS:IsKeyDown(Enum.KeyCode.LeftShift) then
                            moveVector = moveVector - Vector3.new(0, 1, 0)
                        end
                        
                        if bodyVelocity and bodyVelocity.Parent then
                            bodyVelocity.Velocity = moveVector * Config.flySpeed
                        end
                        if bodyGyro and bodyGyro.Parent then
                            bodyGyro.CFrame = camera.CFrame
                        end
                        
                        wait()
                    end
                end)
            end
        else
            notification("Fly is already enabled", "warning")
        end
        
    elseif cmd == "unfly" then
        State.flying = false
        for _, obj in pairs(Data.flyObjects) do
            if obj and obj.Parent then
                obj:Destroy()
            end
        end
        Data.flyObjects = {}
        notification("Fly disabled", "success")
        
    elseif cmd == "noclip" then
        State.noclip = true
        notification("Noclip enabled", "success")
        
        task.spawn(function()
            while State.noclip do
                if player.Character then
                    for _, part in pairs(player.Character:GetDescendants()) do
                        if part:IsA("BasePart") and part.CanCollide then
                            part.CanCollide = false
                        end
                    end
                end
                wait(0.1)
            end
        end)
        
    elseif cmd == "clip" then
        State.noclip = false
        notification("Noclip disabled", "success")
        
    elseif cmd == "speed" or cmd == "ws" then
        local speed = tonumber(args[2]) or 16
        if player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.WalkSpeed = speed
            Config.walkSpeed = speed
            notification("Walk speed set to " .. speed, "success")
        end
        
    elseif cmd == "jp" or cmd == "jumppower" then
        local power = tonumber(args[2]) or 50
        if player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.JumpPower = power
            Config.jumpPower = power
            notification("Jump power set to " .. power, "success")
        end
        
    elseif cmd == "reset" then
        load:FireServer()
        notification("Character reset", "success")
        
    elseif cmd == "ff" or cmd == "fastfarm" then
        State.fastFarm = not State.fastFarm
        notification("Fast farm " .. (State.fastFarm and "enabled" or "disabled"), State.fastFarm and "success" or "info")
        
    elseif cmd == "sf" or cmd == "slowfarm" then
        State.slowFarm = not State.slowFarm
        notification("Slow farm " .. (State.slowFarm and "enabled" or "disabled"), State.slowFarm and "success" or "info")
        
    elseif cmd == "godmode" then
        State.godMode = not State.godMode
        notification("God mode " .. (State.godMode and "enabled" or "disabled"), State.godMode and "success" or "info")
        
    elseif cmd == "kaura" or cmd == "killaura" then
        State.killAura = not State.killAura
        notification("Kill aura " .. (State.killAura and "enabled" or "disabled"), State.killAura and "success" or "info")
        
    elseif cmd == "rejoin" then
        notification("Rejoining server...", "info")
        wait(1)
        game:GetService("TeleportService"):Teleport(game.PlaceId, player)
        
    elseif cmd == "cmds" or cmd == "commands" then
        if executor == player or isAdmin(executor) then
            notification("Admin Commands: kill, god, dmg, tp, bring, admin, test", "info")
            task.wait(1)
            notification("User Commands: fly, noclip, speed, reset, ff, sf, godmode, kaura, rejoin", "info")
        else
            notification("Available Commands: fly, noclip, speed, reset, ff, sf, godmode, kaura, rejoin, test", "info")
        end
        
    else
        notification("Unknown command: " .. cmd, "error")
    end
end

-- Enhanced Chat Handler for Modern Roblox with System Messages
local function setupChatHandler()
    -- Function to send private messages only to specific player
    local function sendPrivateMessage(targetPlayer, message)
        if targetPlayer == player then
            -- Send to local player via notification
            notification(message, "info")
            print("[2take1 Hub] Private message to self: " .. message)
        else
            -- For other players, we can't send private messages directly
            -- So we'll use a method that only shows to them if they have the script
            print("[2take1 Hub] Would send private message to " .. targetPlayer.Name .. ": " .. message)
        end
    end
    
    -- Function to send system messages to chat for ALL players to see
    local function sendSystemMessage(message)
        local success = false
        
        -- Method 1: Use ReplicatedStorage for legacy chat (most reliable for visibility)
        pcall(function()
            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            local chatEvents = ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents")
            if chatEvents then
                local sayMessageRequest = chatEvents:FindFirstChild("SayMessageRequest")
                if sayMessageRequest then
                    sayMessageRequest:FireServer("[2take1 Hub] " .. message, "All")
                    success = true
                    print("[2take1 Hub] Sent legacy chat message: " .. message)
                end
            end
        end)
        
        -- Method 2: Try TextChatService for new chat
        if not success then
            pcall(function()
                local TextChatService = game:GetService("TextChatService")
                if TextChatService and TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
                    local textChannels = TextChatService:FindFirstChild("TextChannels")
                    if textChannels then
                        local rbxGeneral = textChannels:FindFirstChild("RBXGeneral")
                        if rbxGeneral then
                            -- Try to send as system message
                            rbxGeneral:DisplaySystemMessage("[2take1 Hub] " .. message)
                            success = true
                            print("[2take1 Hub] Sent TextChatService message: " .. message)
                        end
                    end
                end
            end)
        end
        
        -- Method 3: Alternative TextChatService approach
        if not success then
            pcall(function()
                local TextChatService = game:GetService("TextChatService")
                local Players = game:GetService("Players")
                local player = Players.LocalPlayer
                
                if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
                    local textChannels = TextChatService:WaitForChild("TextChannels")
                    local systemChannel = textChannels:WaitForChild("RBXSystem", 5)
                    if systemChannel then
                        systemChannel:DisplaySystemMessage("[2take1 Hub] " .. message)
                        success = true
                        print("[2take1 Hub] Sent system channel message: " .. message)
                    end
                end
            end)
        end
        
        -- Method 4: Try Chat service directly
        if not success then
            pcall(function()
                local Chat = game:GetService("Chat")
                Chat:Chat(player.Character.Head, "[2take1 Hub] " .. message, Enum.ChatColor.Blue)
                success = true
                print("[2take1 Hub] Sent Chat service message: " .. message)
            end)
        end
        
        -- Method 5: Create a fake player message (last resort)
        if not success then
            pcall(function()
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local remotes = ReplicatedStorage:GetChildren()
                
                -- Look for any chat-related remotes
                for _, remote in pairs(remotes) do
                    if remote:IsA("RemoteEvent") and (remote.Name:lower():find("chat") or remote.Name:lower():find("message")) then
                        remote:FireServer("[2take1 Hub] " .. message)
                        success = true
                        print("[2take1 Hub] Sent via remote: " .. remote.Name)
                        break
                    end
                end
            end)
        end
        
        -- Method 6: Use workspace for message broadcasting
        if not success then
            pcall(function()
                -- Create a temporary part with message for all to see
                local part = Instance.new("Part")
                part.Name = "SystemMessage"
                part.Anchored = true
                part.CanCollide = false
                part.Transparency = 1
                part.Size = Vector3.new(1, 1, 1)
                part.Position = Vector3.new(0, 1000, 0)
                part.Parent = workspace
                
                local billboardGui = Instance.new("BillboardGui")
                billboardGui.Size = UDim2.new(0, 400, 0, 50)
                billboardGui.StudsOffset = Vector3.new(0, 3, 0)
                billboardGui.Parent = part
                
                local textLabel = Instance.new("TextLabel")
                textLabel.Size = UDim2.new(1, 0, 1, 0)
                textLabel.BackgroundTransparency = 1
                textLabel.Text = "[2take1 Hub] " .. message
                textLabel.TextColor3 = Color3.fromRGB(88, 101, 242)
                textLabel.TextSize = 14
                textLabel.Font = Enum.Font.GothamBold
                textLabel.Parent = billboardGui
                
                -- Remove after 5 seconds
                game:GetService("Debris"):AddItem(part, 5)
                success = true
                print("[2take1 Hub] Created billboard message: " .. message)
            end)
        end
        
        -- Fallback: Notification (only visible to local player)
        if not success then
            notification(message, "info")
            print("[2take1 Hub] Fallback notification: " .. message)
        end
        
        print("[2take1 Hub] Message send attempt completed, success: " .. tostring(success))
    end
    
    -- Multiple methods to ensure chat commands work
    local function handleChat(plr, message)
        if message:sub(1, 1) == ";" then
            local command = message:sub(2):gsub("^%s*", ""):gsub("%s*$", "") -- Trim whitespace
            if command ~= "" then
                print("[2take1 Hub] " .. plr.Name .. " executed: " .. command) -- Debug
                
                -- Enhanced command handling with system messages
                local args = {}
                for word in command:gmatch("%S+") do
                    table.insert(args, word:lower())
                end
                
                local cmd = args[1]
                
                -- Commands with PRIVATE messages (only sender sees the command list)
                if message:sub(1, 6) == ";cmds" then
                    if plr == player then
                        task.wait(0.2)
                        sendPrivateMessage(plr, "OWNER COMMANDS: [1]kill(me/plr/others/all), [2]god(me/plr/others/all), [3]dmg(plr/all/others), [4]admin(all/plr), [5]unadmin(all/plr), [6]tp(plr), [7]bring(plr), [8]fly, [9]noclip, [10]speed(num), [11]reset, [12]ff, [13]sf, [14]godmode, [15]kaura, [16]rejoin")
                    elseif isAdmin(plr) then
                        task.wait(0.2)
                        sendPrivateMessage(plr, "ADMIN COMMANDS: [1]kill(me/plr/others/all), [2]god(me/plr/others/all), [3]dmg(plr/all/others), [4]tp(plr), [5]bring(plr), [6]fly, [7]noclip, [8]speed(num), [9]reset, [10]ff, [11]sf, [12]godmode, [13]kaura")
                    else
                        task.wait(0.2)
                        sendPrivateMessage(plr, "USER COMMANDS: [1]fly, [2]noclip, [3]speed(num), [4]reset, [5]ff, [6]sf, [7]godmode, [8]kaura, [9]rejoin")
                    end
                    return
                end
                
                -- Commands with PUBLIC system messages (everyone sees the action)
                if message:sub(1, 7) == ";admin " and (plr == player or isAdmin(plr)) then
                    local targetName = message:sub(8)
                    if targetName == "all" and plr == player then
                        -- Admin all players
                        for _, targetPlr in ipairs(Players:GetPlayers()) do
                            if not isAdmin(targetPlr) then
                                addAdmin(targetPlr)
                            end
                        end
                        task.wait(0.2)
                        sendSystemMessage("Everyone is now Admin!")
                    else
                        -- Admin specific player
                        local target = findPlayer(targetName)
                        if target then
                            if isAdmin(target) then
                                sendSystemMessage(target.Name .. " is already Admin!")
                            else
                                addAdmin(target)
                                task.wait(0.2)
                                sendSystemMessage(target.Name .. " is now Admin!")
                            end
                        else
                            sendSystemMessage("Player '" .. targetName .. "' not found!")
                        end
                    end
                    return
                end
                
                if message:sub(1, 9) == ";unadmin " and (plr == player or isAdmin(plr)) then
                    local targetName = message:sub(10)
                    if targetName == "all" and plr == player then
                        -- Remove admin from all players except owner
                        local count = 0
                        for i = #Data.admins, 1, -1 do
                            local adminPlr = Players:FindFirstChild(Data.admins[i])
                            if adminPlr and adminPlr ~= player then
                                removeAdmin(adminPlr)
                                count = count + 1
                            end
                        end
                        task.wait(0.2)
                        sendSystemMessage("Removed admin from " .. count .. " players!")
                    else
                        -- Remove admin from specific player
                        local target = findPlayer(targetName)
                        if target then
                            if target == player then
                                sendSystemMessage("Error: Cannot remove admin from Owner!")
                            elseif isAdmin(target) then
                                removeAdmin(target)
                                task.wait(0.2)
                                sendSystemMessage(target.Name .. " is no longer Admin!")
                            else
                                sendSystemMessage(target.Name .. " is not an Admin!")
                            end
                        else
                            sendSystemMessage("Player '" .. targetName .. "' not found!")
                        end
                    end
                    return
                end
                
                if message:sub(1, 6) == ";kill " and (plr == player or isAdmin(plr)) then
                    local targetName = message:sub(7)
                    executeCommand("kill " .. targetName, plr)
                    task.wait(0.2)
                    if targetName == "all" then
                        sendSystemMessage(plr.Name .. " killed everyone!")
                    elseif targetName == "others" then
                        sendSystemMessage(plr.Name .. " killed all other players!")
                    else
                        local target = findPlayer(targetName)
                        if target then
                            sendSystemMessage(plr.Name .. " killed " .. target.Name .. "!")
                        end
                    end
                    return
                end
                
                if message:sub(1, 5) == ";god " and (plr == player or isAdmin(plr)) then
                    local targetName = message:sub(6)
                    executeCommand("god " .. targetName, plr)
                    task.wait(0.2)
                    if targetName == "all" then
                        sendSystemMessage(plr.Name .. " godded everyone!")
                    elseif targetName == "others" then
                        sendSystemMessage(plr.Name .. " godded all other players!")
                    else
                        local target = findPlayer(targetName)
                        if target then
                            sendSystemMessage(plr.Name .. " godded " .. target.Name .. "!")
                        end
                    end
                    return
                end
                
                if message:sub(1, 5) == ";dmg " and (plr == player or isAdmin(plr)) then
                    local params = message:sub(6)
                    executeCommand("dmg " .. params, plr)
                    task.wait(0.2)
                    local args = params:split(" ")
                    local targetName = args[1]
                    local percentage = args[2] or "50"
                    if targetName == "all" then
                        sendSystemMessage(plr.Name .. " damaged everyone " .. percentage .. "%!")
                    elseif targetName == "others" then
                        sendSystemMessage(plr.Name .. " damaged all others " .. percentage .. "%!")
                    else
                        local target = findPlayer(targetName)
                        if target then
                            sendSystemMessage(plr.Name .. " damaged " .. target.Name .. " " .. percentage .. "%!")
                        end
                    end
                    return
                end
                
                if message:sub(1, 4) == ";tp " and (plr == player or isAdmin(plr)) then
                    local targetName = message:sub(5)
                    executeCommand("tp " .. targetName, plr)
                    local target = findPlayer(targetName)
                    if target then
                        task.wait(0.2)
                        sendSystemMessage(plr.Name .. " teleported to " .. target.Name .. "!")
                    end
                    return
                end
                
                if message:sub(1, 7) == ";bring " and (plr == player or isAdmin(plr)) then
                    local targetName = message:sub(8)
                    executeCommand("bring " .. targetName, plr)
                    local target = findPlayer(targetName)
                    if target then
                        task.wait(0.2)
                        sendSystemMessage(plr.Name .. " brought " .. target.Name .. "!")
                    end
                    return
                end
                
                -- Auto farm commands with system messages (optional - can be made private)
                if cmd == "ff" or cmd == "fastfarm" then
                    executeCommand(command, plr)
                    task.wait(0.2)
                    sendSystemMessage(plr.Name .. " toggled fast farm!")
                    return
                end
                
                if cmd == "sf" or cmd == "slowfarm" then
                    executeCommand(command, plr)
                    task.wait(0.2)
                    sendSystemMessage(plr.Name .. " toggled slow farm!")
                    return
                end
                
                if cmd == "godmode" then
                    executeCommand(command, plr)
                    task.wait(0.2)
                    sendSystemMessage(plr.Name .. " toggled god mode!")
                    return
                end
                
                if cmd == "kaura" or cmd == "killaura" then
                    executeCommand(command, plr)
                    task.wait(0.2)
                    sendSystemMessage(plr.Name .. " toggled kill aura!")
                    return
                end
                
                if cmd == "fly" then
                    executeCommand(command, plr)
                    task.wait(0.2)
                    sendSystemMessage(plr.Name .. " toggled fly mode!")
                    return
                end
                
                if cmd == "noclip" then
                    executeCommand(command, plr)
                    task.wait(0.2)
                    sendSystemMessage(plr.Name .. " toggled noclip!")
                    return
                end
                
                if cmd == "reset" then
                    executeCommand(command, plr)
                    task.wait(0.2)
                    sendSystemMessage(plr.Name .. " reset their character!")
                    return
                end
                
                -- Default command execution for other commands (silent)
                executeCommand(command, plr)
            end
        end
    end
    
    -- Handle local player chat
    player.Chatted:Connect(function(message)
        handleChat(player, message)
    end)
    
    -- Method 2: TextChatService for new chat system
    local TextChatService = game:GetService("TextChatService")
    pcall(function()
        if TextChatService then
            TextChatService.MessageReceived:Connect(function(message)
                local sendingPlayer = Players:GetPlayerByUserId(message.TextSource.UserId)
                if sendingPlayer then
                    handleChat(sendingPlayer, message.Text)
                end
            end)
        end
    end)
    
    -- Method 3: Chat service compatibility
    local ChatService = game:GetService("Chat")
    pcall(function()
        ChatService.Chatted:Connect(function(part, message, color)
            local character = part.Parent
            if character and character:IsA("Model") then
                local plr = Players:GetPlayerFromCharacter(character)
                if plr then
                    handleChat(plr, message)
                end
            end
        end)
    end)
    
    -- Method 4: Direct player connections
    local function connectPlayer(plr)
        if plr and plr ~= player then
            -- Multiple connection attempts
            pcall(function()
                plr.Chatted:Connect(function(message)
                    handleChat(plr, message)
                end)
            end)
            
            -- Alternative connection method
            task.spawn(function()
                wait(1) -- Wait for player to fully load
                pcall(function()
                    plr.Chatted:Connect(function(message)
                        handleChat(plr, message)
                    end)
                end)
            end)
        end
    end
    
    -- Connect existing players
    for _, plr in pairs(Players:GetPlayers()) do
        connectPlayer(plr)
    end
    
    -- Connect new players
    Players.PlayerAdded:Connect(function(plr)
        -- Immediate connection
        connectPlayer(plr)
        
        -- Delayed connection for safety
        task.spawn(function()
            wait(2)
            connectPlayer(plr)
        end)
    end)
    
    print("[2take1 Hub] Enhanced chat handler with private/public messages initialized")
end
    
    -- Multiple methods to ensure chat commands work
    local function handleChat(plr, message)
        if message:sub(1, 1) == ";" then
            local command = message:sub(2):gsub("^%s*", ""):gsub("%s*$", "") -- Trim whitespace
            if command ~= "" then
                print("[2take1 Hub] " .. plr.Name .. " executed: " .. command) -- Debug
                
                -- Enhanced command handling with system messages
                local args = {}
                for word in command:gmatch("%S+") do
                    table.insert(args, word:lower())
                end
                
                local cmd = args[1]
                
                -- Commands with system messages
                if message:sub(1, 6) == ";cmds" then
                    if plr == player then
                        task.wait(0.2)
                        sendSystemMessage("OWNER COMMANDS: [1]kill(me/plr/others/all), [2]god(me/plr/others/all), [3]dmg(plr/all/others), [4]admin(all/plr), [5]unadmin(all/plr), [6]tp(plr), [7]bring(plr), [8]fly, [9]noclip, [10]speed(num), [11]reset, [12]ff, [13]sf, [14]godmode, [15]kaura, [16]rejoin")
                    elseif isAdmin(plr) then
                        task.wait(0.2)
                        sendSystemMessage("ADMIN COMMANDS: [1]kill(me/plr/others/all), [2]god(me/plr/others/all), [3]dmg(plr/all/others), [4]tp(plr), [5]bring(plr), [6]fly, [7]noclip, [8]speed(num), [9]reset, [10]ff, [11]sf, [12]godmode, [13]kaura")
                    else
                        task.wait(0.2)
                        sendSystemMessage("USER COMMANDS: [1]fly, [2]noclip, [3]speed(num), [4]reset, [5]ff, [6]sf, [7]godmode, [8]kaura, [9]rejoin")
                    end
                    return
                end
                
                if message:sub(1, 7) == ";admin " and (plr == player or isAdmin(plr)) then
                    local targetName = message:sub(8)
                    if targetName == "all" and plr == player then
                        -- Admin all players
                        for _, targetPlr in ipairs(Players:GetPlayers()) do
                            if not isAdmin(targetPlr) then
                                addAdmin(targetPlr)
                            end
                        end
                        task.wait(0.2)
                        sendSystemMessage("Everyone is now Admin!")
                    else
                        -- Admin specific player
                        local target = findPlayer(targetName)
                        if target then
                            if isAdmin(target) then
                                sendSystemMessage(target.Name .. " is already Admin!")
                            else
                                addAdmin(target)
                                task.wait(0.2)
                                sendSystemMessage(target.Name .. " is now Admin!")
                            end
                        else
                            sendSystemMessage("Player '" .. targetName .. "' not found!")
                        end
                    end
                    return
                end
                
                if message:sub(1, 9) == ";unadmin " and (plr == player or isAdmin(plr)) then
                    local targetName = message:sub(10)
                    if targetName == "all" and plr == player then
                        -- Remove admin from all players except owner
                        local count = 0
                        for i = #Data.admins, 1, -1 do
                            local adminPlr = Players:FindFirstChild(Data.admins[i])
                            if adminPlr and adminPlr ~= player then
                                removeAdmin(adminPlr)
                                count = count + 1
                            end
                        end
                        task.wait(0.2)
                        sendSystemMessage("Removed admin from " .. count .. " players!")
                    else
                        -- Remove admin from specific player
                        local target = findPlayer(targetName)
                        if target then
                            if target == player then
                                sendSystemMessage("Error: Cannot remove admin from Owner!")
                            elseif isAdmin(target) then
                                removeAdmin(target)
                                task.wait(0.2)
                                sendSystemMessage(target.Name .. " is no longer Admin!")
                            else
                                sendSystemMessage(target.Name .. " is not an Admin!")
                            end
                        else
                            sendSystemMessage("Player '" .. targetName .. "' not found!")
                        end
                    end
                    return
                end
                
                if message:sub(1, 6) == ";kill " and (plr == player or isAdmin(plr)) then
                    local targetName = message:sub(7)
                    executeCommand("kill " .. targetName, plr)
                    task.wait(0.2)
                    if targetName == "all" then
                        sendSystemMessage(plr.Name .. " killed everyone!")
                    elseif targetName == "others" then
                        sendSystemMessage(plr.Name .. " killed all other players!")
                    else
                        local target = findPlayer(targetName)
                        if target then
                            sendSystemMessage(plr.Name .. " killed " .. target.Name .. "!")
                        end
                    end
                    return
                end
                
                if message:sub(1, 5) == ";god " and (plr == player or isAdmin(plr)) then
                    local targetName = message:sub(6)
                    executeCommand("god " .. targetName, plr)
                    task.wait(0.2)
                    if targetName == "all" then
                        sendSystemMessage(plr.Name .. " godded everyone!")
                    elseif targetName == "others" then
                        sendSystemMessage(plr.Name .. " godded all other players!")
                    else
                        local target = findPlayer(targetName)
                        if target then
                            sendSystemMessage(plr.Name .. " godded " .. target.Name .. "!")
                        end
                    end
                    return
                end
                
                if message:sub(1, 5) == ";dmg " and (plr == player or isAdmin(plr)) then
                    local params = message:sub(6)
                    executeCommand("dmg " .. params, plr)
                    task.wait(0.2)
                    local args = params:split(" ")
                    local targetName = args[1]
                    local percentage = args[2] or "50"
                    if targetName == "all" then
                        sendSystemMessage(plr.Name .. " damaged everyone " .. percentage .. "%!")
                    elseif targetName == "others" then
                        sendSystemMessage(plr.Name .. " damaged all others " .. percentage .. "%!")
                    else
                        local target = findPlayer(targetName)
                        if target then
                            sendSystemMessage(plr.Name .. " damaged " .. target.Name .. " " .. percentage .. "%!")
                        end
                    end
                    return
                end
                
                if message:sub(1, 4) == ";tp " and (plr == player or isAdmin(plr)) then
                    local targetName = message:sub(5)
                    executeCommand("tp " .. targetName, plr)
                    local target = findPlayer(targetName)
                    if target then
                        task.wait(0.2)
                        sendSystemMessage(plr.Name .. " teleported to " .. target.Name .. "!")
                    end
                    return
                end
                
                if message:sub(1, 7) == ";bring " and (plr == player or isAdmin(plr)) then
                    local targetName = message:sub(8)
                    executeCommand("bring " .. targetName, plr)
                    local target = findPlayer(targetName)
                    if target then
                        task.wait(0.2)
                        sendSystemMessage(plr.Name .. " brought " .. target.Name .. "!")
                    end
                    return
                end
                
                -- Auto farm commands with system messages
                if cmd == "ff" or cmd == "fastfarm" then
                    executeCommand(command, plr)
                    task.wait(0.2)
                    sendSystemMessage(plr.Name .. " toggled fast farm!")
                    return
                end
                
                if cmd == "sf" or cmd == "slowfarm" then
                    executeCommand(command, plr)
                    task.wait(0.2)
                    sendSystemMessage(plr.Name .. " toggled slow farm!")
                    return
                end
                
                if cmd == "godmode" then
                    executeCommand(command, plr)
                    task.wait(0.2)
                    sendSystemMessage(plr.Name .. " toggled god mode!")
                    return
                end
                
                if cmd == "kaura" or cmd == "killaura" then
                    executeCommand(command, plr)
                    task.wait(0.2)
                    sendSystemMessage(plr.Name .. " toggled kill aura!")
                    return
                end
                
                if cmd == "fly" then
                    executeCommand(command, plr)
                    task.wait(0.2)
                    sendSystemMessage(plr.Name .. " toggled fly mode!")
                    return
                end
                
                if cmd == "noclip" then
                    executeCommand(command, plr)
                    task.wait(0.2)
                    sendSystemMessage(plr.Name .. " toggled noclip!")
                    return
                end
                
                if cmd == "reset" then
                    executeCommand(command, plr)
                    task.wait(0.2)
                    sendSystemMessage(plr.Name .. " reset their character!")
                    return
                end
                
                -- Default command execution for other commands
                executeCommand(command, plr)
            end
        end
    end
    
    -- Handle local player chat
    player.Chatted:Connect(function(message)
        handleChat(player, message)
    end)
    
    -- Method 2: TextChatService for new chat system
    local TextChatService = game:GetService("TextChatService")
    pcall(function()
        if TextChatService then
            TextChatService.MessageReceived:Connect(function(message)
                local sendingPlayer = Players:GetPlayerByUserId(message.TextSource.UserId)
                if sendingPlayer then
                    handleChat(sendingPlayer, message.Text)
                end
            end)
        end
    end)
    
    -- Method 3: Chat service compatibility
    local ChatService = game:GetService("Chat")
    pcall(function()
        ChatService.Chatted:Connect(function(part, message, color)
            local character = part.Parent
            if character and character:IsA("Model") then
                local plr = Players:GetPlayerFromCharacter(character)
                if plr then
                    handleChat(plr, message)
                end
            end
        end)
    end)
    
    -- Method 4: Direct player connections
    local function connectPlayer(plr)
        if plr and plr ~= player then
            -- Multiple connection attempts
            pcall(function()
                plr.Chatted:Connect(function(message)
                    handleChat(plr, message)
                end)
            end)
            
            -- Alternative connection method
            task.spawn(function()
                wait(1) -- Wait for player to fully load
                pcall(function()
                    plr.Chatted:Connect(function(message)
                        handleChat(plr, message)
                    end)
                end)
            end)
        end
    end
    
    -- Connect existing players
    for _, plr in pairs(Players:GetPlayers()) do
        connectPlayer(plr)
    end
    
    -- Connect new players
    Players.PlayerAdded:Connect(function(plr)
        -- Immediate connection
        connectPlayer(plr)
        
        -- Delayed connection for safety
        task.spawn(function()
            wait(2)
            connectPlayer(plr)
        end)
    end)
    
    print("[2take1 Hub] Enhanced chat handler with system messages initialized")
end
    
    -- Multiple methods to ensure chat commands work
    local function handleChat(plr, message)
        if message:sub(1, 1) == ";" then
            local command = message:sub(2):gsub("^%s*", ""):gsub("%s*$", "") -- Trim whitespace
            if command ~= "" then
                print("[2take1 Hub] " .. plr.Name .. " executed: " .. command) -- Debug
                
                -- Enhanced command handling with system messages
                local args = {}
                for word in command:gmatch("%S+") do
                    table.insert(args, word:lower())
                end
                
                local cmd = args[1]
                
                -- Commands with system messages
                if message:sub(1, 6) == ";cmds" then
                    if plr == player then
                        wait(0.2)
                        sendSystemMessage("OWNER COMMANDS: [1]kill(me/plr/others/all), [2]god(me/plr/others/all), [3]dmg(plr/all/others), [4]admin(all/plr), [5]unadmin(all/plr), [6]tp(plr), [7]bring(plr), [8]fly, [9]noclip, [10]speed(num), [11]reset, [12]ff, [13]sf, [14]godmode, [15]kaura, [16]rejoin")
                    elseif isAdmin(plr) then
                        wait(0.2)
                        sendSystemMessage("ADMIN COMMANDS: [1]kill(me/plr/others/all), [2]god(me/plr/others/all), [3]dmg(plr/all/others), [4]tp(plr), [5]bring(plr), [6]fly, [7]noclip, [8]speed(num), [9]reset, [10]ff, [11]sf, [12]godmode, [13]kaura")
                    else
                        wait(0.2)
                        sendSystemMessage("USER COMMANDS: [1]fly, [2]noclip, [3]speed(num), [4]reset, [5]ff, [6]sf, [7]godmode, [8]kaura, [9]rejoin")
                    end
                    return
                end
                
                if message:sub(1, 7) == ";admin " and (plr == player or isAdmin(plr)) then
                    local targetName = message:sub(8)
                    if targetName == "all" and plr == player then
                        -- Admin all players
                        for _, targetPlr in ipairs(Players:GetPlayers()) do
                            if not isAdmin(targetPlr) then
                                addAdmin(targetPlr)
                            end
                        end
                        wait(0.2)
                        sendSystemMessage("Everyone is now Admin!")
                    else
                        -- Admin specific player
                        local target = findPlayer(targetName)
                        if target then
                            if isAdmin(target) then
                                sendSystemMessage(target.Name .. " is already Admin!")
                            else
                                addAdmin(target)
                                wait(0.2)
                                sendSystemMessage(target.Name .. " is now Admin!")
                            end
                        else
                            sendSystemMessage("Player '" .. targetName .. "' not found!")
                        end
                    end
                    return
                end
                
                if message:sub(1, 9) == ";unadmin " and (plr == player or isAdmin(plr)) then
                    local targetName = message:sub(10)
                    if targetName == "all" and plr == player then
                        -- Remove admin from all players except owner
                        local count = 0
                        for i = #Data.admins, 1, -1 do
                            local adminPlr = Players:FindFirstChild(Data.admins[i])
                            if adminPlr and adminPlr ~= player then
                                removeAdmin(adminPlr)
                                count = count + 1
                            end
                        end
                        wait(0.2)
                        sendSystemMessage("Removed admin from " .. count .. " players!")
                    else
                        -- Remove admin from specific player
                        local target = findPlayer(targetName)
                        if target then
                            if target == player then
                                sendSystemMessage("Error: Cannot remove admin from Owner!")
                            elseif isAdmin(target) then
                                removeAdmin(target)
                                wait(0.2)
                                sendSystemMessage(target.Name .. " is no longer Admin!")
                            else
                                sendSystemMessage(target.Name .. " is not an Admin!")
                            end
                        else
                            sendSystemMessage("Player '" .. targetName .. "' not found!")
                        end
                    end
                    return
                end
                
                if message:sub(1, 6) == ";kill " and (plr == player or isAdmin(plr)) then
                    local targetName = message:sub(7)
                    executeCommand("kill " .. targetName, plr)
                    wait(0.2)
                    if targetName == "all" then
                        sendSystemMessage(plr.Name .. " killed everyone!")
                    elseif targetName == "others" then
                        sendSystemMessage(plr.Name .. " killed all other players!")
                    else
                        local target = findPlayer(targetName)
                        if target then
                            sendSystemMessage(plr.Name .. " killed " .. target.Name .. "!")
                        end
                    end
                    return
                end
                
                if message:sub(1, 5) == ";god " and (plr == player or isAdmin(plr)) then
                    local targetName = message:sub(6)
                    executeCommand("god " .. targetName, plr)
                    wait(0.2)
                    if targetName == "all" then
                        sendSystemMessage(plr.Name .. " godded everyone!")
                    elseif targetName == "others" then
                        sendSystemMessage(plr.Name .. " godded all other players!")
                    else
                        local target = findPlayer(targetName)
                        if target then
                            sendSystemMessage(plr.Name .. " godded " .. target.Name .. "!")
                        end
                    end
                    return
                end
                
                if message:sub(1, 5) == ";dmg " and (plr == player or isAdmin(plr)) then
                    local params = message:sub(6)
                    executeCommand("dmg " .. params, plr)
                    wait(0.2)
                    local args = params:split(" ")
                    local targetName = args[1]
                    local percentage = args[2] or "50"
                    if targetName == "all" then
                        sendSystemMessage(plr.Name .. " damaged everyone " .. percentage .. "%!")
                    elseif targetName == "others" then
                        sendSystemMessage(plr.Name .. " damaged all others " .. percentage .. "%!")
                    else
                        local target = findPlayer(targetName)
                        if target then
                            sendSystemMessage(plr.Name .. " damaged " .. target.Name .. " " .. percentage .. "%!")
                        end
                    end
                    return
                end
                
                if message:sub(1, 4) == ";tp " and (plr == player or isAdmin(plr)) then
                    local targetName = message:sub(5)
                    executeCommand("tp " .. targetName, plr)
                    local target = findPlayer(targetName)
                    if target then
                        wait(0.2)
                        sendSystemMessage(plr.Name .. " teleported to " .. target.Name .. "!")
                    end
                    return
                end
                
                if message:sub(1, 7) == ";bring " and (plr == player or isAdmin(plr)) then
                    local targetName = message:sub(8)
                    executeCommand("bring " .. targetName, plr)
                    local target = findPlayer(targetName)
                    if target then
                        wait(0.2)
                        sendSystemMessage(plr.Name .. " brought " .. target.Name .. "!")
                    end
                    return
                end
                
                -- Auto farm commands with system messages
                if cmd == "ff" or cmd == "fastfarm" then
                    executeCommand(command, plr)
                    wait(0.2)
                    sendSystemMessage(plr.Name .. " toggled fast farm!")
                    return
                end
                
                if cmd == "sf" or cmd == "slowfarm" then
                    executeCommand(command, plr)
                    wait(0.2)
                    sendSystemMessage(plr.Name .. " toggled slow farm!")
                    return
                end
                
                if cmd == "godmode" then
                    executeCommand(command, plr)
                    wait(0.2)
                    sendSystemMessage(plr.Name .. " toggled god mode!")
                    return
                end
                
                if cmd == "kaura" or cmd == "killaura" then
                    executeCommand(command, plr)
                    wait(0.2)
                    sendSystemMessage(plr.Name .. " toggled kill aura!")
                    return
                end
                
                if cmd == "fly" then
                    executeCommand(command, plr)
                    wait(0.2)
                    sendSystemMessage(plr.Name .. " toggled fly mode!")
                    return
                end
                
                if cmd == "noclip" then
                    executeCommand(command, plr)
                    wait(0.2)
                    sendSystemMessage(plr.Name .. " toggled noclip!")
                    return
                end
                
                if cmd == "reset" then
                    executeCommand(command, plr)
                    wait(0.2)
                    sendSystemMessage(plr.Name .. " reset their character!")
                    return
                end
                
                -- Default command execution for other commands
                executeCommand(command, plr)
            end
        end
    end
    
    -- Handle local player chat
    player.Chatted:Connect(function(message)
        handleChat(player, message)
    end)
    
    -- Method 2: TextChatService for new chat system
    local TextChatService = game:GetService("TextChatService")
    pcall(function()
        if TextChatService then
            TextChatService.MessageReceived:Connect(function(message)
                local sendingPlayer = Players:GetPlayerByUserId(message.TextSource.UserId)
                if sendingPlayer then
                    handleChat(sendingPlayer, message.Text)
                end
            end)
        end
    end)
    
    -- Method 3: Chat service compatibility
    local ChatService = game:GetService("Chat")
    pcall(function()
        ChatService.Chatted:Connect(function(part, message, color)
            local character = part.Parent
            if character and character:IsA("Model") then
                local plr = Players:GetPlayerFromCharacter(character)
                if plr then
                    handleChat(plr, message)
                end
            end
        end)
    end)
    
    -- Method 4: Direct player connections
    local function connectPlayer(plr)
        if plr and plr ~= player then
            -- Multiple connection attempts
            pcall(function()
                plr.Chatted:Connect(function(message)
                    handleChat(plr, message)
                end)
            end)
            
            -- Alternative connection method
            task.spawn(function()
                wait(1) -- Wait for player to fully load
                pcall(function()
                    plr.Chatted:Connect(function(message)
                        handleChat(plr, message)
                    end)
                end)
            end)
        end
    end
    
    -- Connect existing players
    for _, plr in pairs(Players:GetPlayers()) do
        connectPlayer(plr)
    end
    
    -- Connect new players
    Players.PlayerAdded:Connect(function(plr)
        -- Immediate connection
        connectPlayer(plr)
        
        -- Delayed connection for safety
        task.spawn(function()
            wait(2)
            connectPlayer(plr)
        end)
    end)
    
    print("[2take1 Hub] Enhanced chat handler with system messages initialized")
end

-- Create GUI
local function createGUI()
    -- Main ScreenGui
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "2take1Hub"
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Try CoreGui first, fallback to PlayerGui
    local success, _ = pcall(function()
        screenGui.Parent = game:GetService("CoreGui")
    end)
    if not success then
        screenGui.Parent = player:WaitForChild("PlayerGui")
    end
    
    -- Main Frame
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, 400, 0, 500)
    mainFrame.Position = UDim2.new(0.5, -200, 0.5, -250)
    mainFrame.BackgroundColor3 = Theme.background
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui
    
    -- Corner radius
    local mainCorner = Instance.new("UICorner")
    mainCorner.CornerRadius = UDim.new(0, 12)
    mainCorner.Parent = mainFrame
    
    -- Header
    local header = Instance.new("Frame")
    header.Name = "Header"
    header.Size = UDim2.new(1, 0, 0, 40)
    header.BackgroundColor3 = Theme.secondary
    header.BorderSizePixel = 0
    header.Parent = mainFrame
    
    local headerCorner = Instance.new("UICorner")
    headerCorner.CornerRadius = UDim.new(0, 12)
    headerCorner.Parent = header
    
    -- Header fix (bottom corners)
    local headerFix = Instance.new("Frame")
    headerFix.Size = UDim2.new(1, 0, 0, 12)
    headerFix.Position = UDim2.new(0, 0, 1, -12)
    headerFix.BackgroundColor3 = Theme.secondary
    headerFix.BorderSizePixel = 0
    headerFix.Parent = header
    
    -- Title
    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.Size = UDim2.new(1, -50, 1, 0)
    title.Position = UDim2.new(0, 15, 0, 0)
    title.BackgroundTransparency = 1
    title.Text = "2take1 Hub"
    title.TextColor3 = Theme.text
    title.TextSize = 16
    title.Font = Enum.Font.GothamBold
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Parent = header
    
    -- Close Button
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.new(0, 30, 0, 30)
    closeButton.Position = UDim2.new(1, -40, 0, 5)
    closeButton.BackgroundColor3 = Theme.danger
    closeButton.Text = "×"
    closeButton.TextColor3 = Theme.text
    closeButton.TextSize = 18
    closeButton.Font = Enum.Font.GothamBold
    closeButton.Parent = header
    
    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(0, 6)
    closeCorner.Parent = closeButton
    
    -- Content Frame
    local contentFrame = Instance.new("ScrollingFrame")
    contentFrame.Name = "ContentFrame"
    contentFrame.Size = UDim2.new(1, -20, 1, -60)
    contentFrame.Position = UDim2.new(0, 10, 0, 50)
    contentFrame.BackgroundColor3 = Theme.secondary
    contentFrame.BorderSizePixel = 0
    contentFrame.ScrollBarThickness = 6
    contentFrame.ScrollBarImageColor3 = Theme.accent
    contentFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    contentFrame.Parent = mainFrame
    
    local contentCorner = Instance.new("UICorner")
    contentCorner.CornerRadius = UDim.new(0, 10)
    contentCorner.Parent = contentFrame
    
    -- Layout for content
    local listLayout = Instance.new("UIListLayout")
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.Padding = UDim.new(0, 10)
    listLayout.Parent = contentFrame
    
    -- Padding for content
    local padding = Instance.new("UIPadding")
    padding.PaddingTop = UDim.new(0, 10)
    padding.PaddingLeft = UDim.new(0, 10)
    padding.PaddingRight = UDim.new(0, 10)
    padding.PaddingBottom = UDim.new(0, 10)
    padding.Parent = contentFrame
    
    -- Command Bar
    local commandBar = Instance.new("Frame")
    commandBar.Name = "CommandBar"
    commandBar.Size = UDim2.new(0, 400, 0, 45)
    commandBar.Position = UDim2.new(0.5, -200, 0, -60)
    commandBar.BackgroundColor3 = Theme.secondary
    commandBar.BorderSizePixel = 0
    commandBar.Visible = false
    commandBar.Parent = screenGui
    
    local cmdCorner = Instance.new("UICorner")
    cmdCorner.CornerRadius = UDim.new(0, 10)
    cmdCorner.Parent = commandBar
    
    local cmdStroke = Instance.new("UIStroke")
    cmdStroke.Color = Theme.accent
    cmdStroke.Thickness = 2
    cmdStroke.Parent = commandBar
    
    -- Command prefix
    local cmdPrefix = Instance.new("TextLabel")
    cmdPrefix.Size = UDim2.new(0, 40, 1, 0)
    cmdPrefix.BackgroundTransparency = 1
    cmdPrefix.Text = "2t1>"
    cmdPrefix.TextColor3 = Theme.accent
    cmdPrefix.TextSize = 14
    cmdPrefix.Font = Enum.Font.GothamBold
    cmdPrefix.Parent = commandBar
    
    -- Command input
    local commandInput = Instance.new("TextBox")
    commandInput.Name = "CommandInput"
    commandInput.Size = UDim2.new(1, -50, 1, -10)
    commandInput.Position = UDim2.new(0, 45, 0, 5)
    commandInput.BackgroundTransparency = 1
    commandInput.Text = ""
    commandInput.PlaceholderText = "Enter command (try 'cmds' for help)..."
    commandInput.PlaceholderColor3 = Theme.textDim
    commandInput.TextColor3 = Theme.text
    commandInput.TextSize = 14
    commandInput.Font = Enum.Font.Gotham
    commandInput.TextXAlignment = Enum.TextXAlignment.Left
    commandInput.ClearTextOnFocus = false
    commandInput.Parent = commandBar
    
    return {
        screenGui = screenGui,
        mainFrame = mainFrame,
        header = header,
        closeButton = closeButton,
        contentFrame = contentFrame,
        commandBar = commandBar,
        commandInput = commandInput
    }
end

-- Create UI Elements
local function createToggle(text, parent, callback)
    local toggleFrame = Instance.new("Frame")
    toggleFrame.Size = UDim2.new(1, 0, 0, 40)
    toggleFrame.BackgroundColor3 = Theme.tertiary
    toggleFrame.BorderSizePixel = 0
    toggleFrame.Parent = parent
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 8)
    toggleCorner.Parent = toggleFrame
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -70, 1, 0)
    label.Position = UDim2.new(0, 15, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = Theme.text
    label.TextSize = 14
    label.Font = Enum.Font.Gotham
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = toggleFrame
    
    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(0, 50, 0, 25)
    toggleButton.Position = UDim2.new(1, -60, 0.5, -12.5)
    toggleButton.BackgroundColor3 = Theme.background
    toggleButton.Text = ""
    toggleButton.Parent = toggleFrame
    
    local toggleBtnCorner = Instance.new("UICorner")
    toggleBtnCorner.CornerRadius = UDim.new(0, 12)
    toggleBtnCorner.Parent = toggleButton
    
    local indicator = Instance.new("Frame")
    indicator.Size = UDim2.new(0, 20, 0, 20)
    indicator.Position = UDim2.new(0, 2.5, 0, 2.5)
    indicator.BackgroundColor3 = Theme.text
    indicator.BorderSizePixel = 0
    indicator.Parent = toggleButton
    
    local indicatorCorner = Instance.new("UICorner")
    indicatorCorner.CornerRadius = UDim.new(0, 10)
    indicatorCorner.Parent = indicator
    
    local toggled = false
    
    toggleButton.MouseButton1Click:Connect(function()
        toggled = not toggled
        
        local newButtonColor = toggled and Theme.success or Theme.background
        local newIndicatorPos = toggled and UDim2.new(1, -22.5, 0, 2.5) or UDim2.new(0, 2.5, 0, 2.5)
        
        createTween(toggleButton, {BackgroundColor3 = newButtonColor}):Play()
        createTween(indicator, {Position = newIndicatorPos}):Play()
        
        callback(toggled)
    end)
    
    return toggleFrame
end

local function createButton(text, parent, callback)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, 0, 0, 40)
    button.BackgroundColor3 = Theme.accent
    button.Text = text
    button.TextColor3 = Theme.text
    button.TextSize = 14
    button.Font = Enum.Font.GothamBold
    button.BorderSizePixel = 0
    button.Parent = parent
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 8)
    buttonCorner.Parent = button
    
    button.MouseButton1Click:Connect(callback)
    
    -- Hover effects
    button.MouseEnter:Connect(function()
        createTween(button, {BackgroundColor3 = Theme.accent:lerp(Color3.new(1, 1, 1), 0.1)}):Play()
    end)
    
    button.MouseLeave:Connect(function()
        createTween(button, {BackgroundColor3 = Theme.accent}):Play()
    end)
    
    return button
end

-- Initialize GUI
GUI = createGUI()

-- Create UI Elements
createToggle("Fast Farm", GUI.contentFrame, function(enabled)
    State.fastFarm = enabled
    notification("Fast farm " .. (enabled and "enabled" or "disabled"), enabled and "success" or "info")
end)

createToggle("Slow Farm", GUI.contentFrame, function(enabled)
    State.slowFarm = enabled
    notification("Slow farm " .. (enabled and "enabled" or "disabled"), enabled and "success" or "info")
end)

createToggle("God Mode", GUI.contentFrame, function(enabled)
    State.godMode = enabled
    notification("God mode " .. (enabled and "enabled" or "disabled"), enabled and "success" or "info")
end)

createToggle("Kill Aura", GUI.contentFrame, function(enabled)
    State.killAura = enabled
    notification("Kill aura " .. (enabled and "enabled" or "disabled"), enabled and "success" or "info")
end)

createToggle("Fly", GUI.contentFrame, function(enabled)
    if enabled then
        executeCommand("fly", player)
    else
        executeCommand("unfly", player)
    end
end)

createToggle("Noclip", GUI.contentFrame, function(enabled)
    if enabled then
        executeCommand("noclip", player)
    else
        executeCommand("clip", player)
    end
end)

-- Action Buttons
createButton("Kill All Players", GUI.contentFrame, function()
    executeCommand("kill all", player)
end)

createButton("God All Players", GUI.contentFrame, function()
    executeCommand("god all", player)
end)

createButton("Damage All 50%", GUI.contentFrame, function()
    executeCommand("dmg all 50", player)
end)

createButton("Damage All 25%", GUI.contentFrame, function()
    executeCommand("dmg all 25", player)
end)

createButton("Reset Character", GUI.contentFrame, function()
    executeCommand("reset", player)
end)

createButton("Rejoin Server", GUI.contentFrame, function()
    executeCommand("rejoin", player)
end)

-- Update content size
local function updateContentSize()
    GUI.contentFrame.CanvasSize = UDim2.new(0, 0, 0, GUI.contentFrame.UIListLayout.AbsoluteContentSize.Y + 20)
end

updateContentSize()

-- GUI Events
GUI.closeButton.MouseButton1Click:Connect(function()
    createTween(GUI.mainFrame, {Position = UDim2.new(0.5, -200, 0, -600)}, 0.5):Play()
    wait(0.5)
    GUI.screenGui:Destroy()
    State.guiOpen = false
end)

-- Dragging functionality
local dragging = false
local dragStart = nil
local startPos = nil

GUI.header.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = GUI.mainFrame.Position
    end
end)

UIS.InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Position - dragStart
        GUI.mainFrame.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end
end)

UIS.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)

-- Command Bar functionality
UIS.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if input.KeyCode == Enum.KeyCode.Semicolon and State.guiOpen then
        GUI.commandBar.Visible = true
        createTween(GUI.commandBar, {Position = UDim2.new(0.5, -200, 0, 100)}):Play()
        wait(0.3)
        GUI.commandInput:CaptureFocus()
    end
end)

GUI.commandInput.Focused:Connect(function()
    State.focused = true
end)

GUI.commandInput.FocusLost:Connect(function(enterPressed)
    State.focused = false
    
    if enterPressed and GUI.commandInput.Text ~= "" then
        local command = GUI.commandInput.Text
        table.insert(Data.commandHistory, command)
        Data.historyIndex = #Data.commandHistory + 1
        
        executeCommand(command, player)
        GUI.commandInput.Text = ""
    end
    
    createTween(GUI.commandBar, {Position = UDim2.new(0.5, -200, 0, -60)}):Play()
    wait(0.3)
    GUI.commandBar.Visible = false
end)

-- Hotkeys
local hotkeys = {
    [Enum.KeyCode.F1] = function() executeCommand("ff", player) end,
    [Enum.KeyCode.F2] = function() executeCommand("sf", player) end,
    [Enum.KeyCode.F3] = function() executeCommand("godmode", player) end,
    [Enum.KeyCode.F4] = function() executeCommand("kaura", player) end,
    [Enum.KeyCode.F5] = function() executeCommand("fly", player) end,
    [Enum.KeyCode.F6] = function() executeCommand("noclip", player) end,
    [Enum.KeyCode.Delete] = function() executeCommand("kill all", player) end,
    [Enum.KeyCode.Insert] = function() executeCommand("god all", player) end,
}

UIS.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed or State.focused then return end
    
    if hotkeys[input.KeyCode] then
        hotkeys[input.KeyCode]()
    end
end)

-- Main Loop
local frameCount = 0
RunService.Heartbeat:Connect(function()
    frameCount = frameCount + 1
    
    if not State.guiOpen or not player.Character then return end
    
    local character = player.Character
    local humanoid = character:FindFirstChild("Humanoid")
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    
    if not humanoid or not rootPart then return end
    
    -- Fast Farm
    if State.fastFarm then
        local handle = getSwordHandle()
        if handle and handle:FindFirstChild("up") then
            for i = 1, Config.speed do
                handle.up.RemoteEvent:FireServer()
            end
        end
    end
    
    -- Slow Farm
    if State.slowFarm then
        local handle = getSwordHandle()
        if handle and handle:FindFirstChild("up") then
            for i = 1, 3 do
                handle.up.RemoteEvent:FireServer()
            end
        end
    end
    
    -- God Mode
    if State.godMode then
        local pvp = character:FindFirstChild("pvp")
        if pvp then
            pvp:Destroy()
        end
    end
    
    -- Kill Aura
    if State.killAura and frameCount % 15 == 0 then
        local handle = getSwordHandle()
        if handle and handle:FindFirstChild("dmg") then
            local power = 1000
            if player.leaderstats and player.leaderstats:FindFirstChild("Power") then
                power = player.leaderstats.Power.Value
            end
            
            for _, target in pairs(workspace:GetChildren()) do
                if target:FindFirstChild("Humanoid") and target:FindFirstChild("HumanoidRootPart") and target.Name ~= player.Name then
                    local targetHumanoid = target.Humanoid
                    local targetRoot = target.HumanoidRootPart
                    
                    if targetHumanoid.Health > 0 then
                        local distance = (rootPart.Position - targetRoot.Position).Magnitude
                        if distance <= Config.range then
                            handle.dmg.RemoteEvent:FireServer(targetHumanoid, power)
                        end
                    end
                end
            end
        end
    end
end)

-- Character respawn handling
player.CharacterAdded:Connect(function(character)
    wait(1)
    
    -- Restore settings
    if character:FindFirstChild("Humanoid") then
        character.Humanoid.WalkSpeed = Config.walkSpeed
        character.Humanoid.JumpPower = Config.jumpPower
    end
    
    -- Re-enable god mode if it was on
    if State.godMode then
        local pvp = character:FindFirstChild("pvp")
        if pvp then
            pvp:Destroy()
        end
    end
    
    -- Re-enable noclip if it was on
    if State.noclip then
        executeCommand("noclip", player)
    end
end)

-- Admin cleanup when players leave
Players.PlayerRemoving:Connect(function(plr)
    for i, adminName in pairs(Data.admins) do
        if adminName:lower() == plr.Name:lower() then
            table.remove(Data.admins, i)
            notification(plr.Name .. " (admin) left the server", "info")
            break
        end
    end
end)

-- Setup chat handler
setupChatHandler()

-- Startup
task.spawn(function()
    -- Animate GUI in
    createTween(GUI.mainFrame, {Position = UDim2.new(0.5, -200, 0.5, -250)}, 0.8):Play()
    
    wait(1)
    notification("2take1 Hub loaded successfully!", "success")
    
    wait(1.5)
    notification("Press ';' to open command bar | F1-F6 for quick toggles", "info")
    
    wait(1.5)
    notification("Type ';cmds' for all commands | ';admin [player]' to give admin", "info")
end)
